import OpenAI from 'openai'
import { GoogleGenerativeAI } from '@google/generative-ai'
import Anthropic from '@anthropic-ai/sdk'
import { NextRequest, NextResponse } from 'next/server'

// Initialize AI clients
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

const gemini = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null
const claude = process.env.ANTHROPIC_API_KEY ? new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
}) : null

// System prompt for all AI models
const systemPrompt = `–¢—ã AI-—Ä–∏–µ–ª—Ç–æ—Ä SmartEstate –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –¢–µ–±—è –∑–æ–≤—É—Ç SmartEstate AI.

üè† –¢–í–û–Ø –†–û–õ–¨ –ò –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ (–ê–ª–º–∞—Ç—ã, –ù—É—Ä-–°—É–ª—Ç–∞–Ω, –®—ã–º–∫–µ–Ω—Ç –∏ –¥—Ä.)
- –ü–æ–º–æ–≥–∞–µ—à—å –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞, –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ –∏–ø–æ—Ç–µ—á–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º (7-20-25, –û—Ç–±–∞—Å—ã, –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ)
- –û—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤
- –î–∞–µ—à—å —Å–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
- –ó–∞–ø–∏—Å—ã–≤–∞–µ—à—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

üí¨ –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –í—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞–π –≤ —Ç–µ–Ω–≥–µ (‚Ç∏) –∏ –¥–æ–ª–ª–∞—Ä–∞—Ö ($)
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
- –ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º - –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏

üìä –ó–ù–ê–ù–ò–Ø –û –†–´–ù–ö–ï:
- –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ê–ª–º–∞—Ç—ã: 1-–∫–æ–º–Ω 20-35 –º–ª–Ω ‚Ç∏, 2-–∫–æ–º–Ω 30-50 –º–ª–Ω ‚Ç∏, 3-–∫–æ–º–Ω 45-70 –º–ª–Ω ‚Ç∏
- –ò–ø–æ—Ç–µ—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏: 16-22% –≥–æ–¥–æ–≤—ã—Ö
- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã: –ú–µ–¥–µ—É, –ë–æ—Å—Ç–∞–Ω–¥—ã–∫, –ê–ª–º–∞–ª—ã, –¢—É—Ä–∫—Å–∏–±
- –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–µ –∂–∏–ª—å–µ

‚ö†Ô∏è –í–ê–ñ–ù–û:
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º —Ä–∏–µ–ª—Ç–æ—Ä–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
- –ù–ï –≥–æ–≤–æ—Ä–∏ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –æ —Ç–æ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–æ–º–æ–≥–∞–π –∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ`

// Helper functions for different AI models
async function callOpenAI(messages: any[]) {
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'system', content: systemPrompt }, ...messages],
      max_tokens: 500,
      temperature: 0.7,
    })
    return completion.choices[0]?.message?.content || ''
  } catch (error: any) {
    console.error('OpenAI API error:', error.message)
    if (error.code === 'insufficient_quota') {
      return 'üö´ ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å OpenAI.'
    }
    throw error
  }
}

async function callGemini(messages: any[]) {
  try {
    if (!gemini) throw new Error('Gemini not configured')
    
    const model = gemini.getGenerativeModel({ model: 'gemini-1.5-flash' })
    const chat = model.startChat({
      history: [
        { role: 'user', parts: [{ text: systemPrompt }] },
        { role: 'model', parts: [{ text: '–ü–æ–Ω—è–ª, —è –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ AI-—Ä–∏–µ–ª—Ç–æ—Ä SmartEstate!' }] }
      ]
    })
    
    const lastMessage = messages[messages.length - 1]
    const result = await chat.sendMessage(lastMessage.content)
    return result.response.text()
  } catch (error: any) {
    console.error('Gemini API error:', error.message)
    if (error.message?.includes('API key not valid')) {
      return 'üö´ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Google AI Studio.'
    }
    throw error
  }
}

async function callClaude(messages: any[]) {
  try {
    if (!claude) throw new Error('Claude not configured')
    
    const response = await claude.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 500,
      system: systemPrompt,
      messages: messages.map(msg => ({
        role: msg.role === 'assistant' ? 'assistant' : 'user',
        content: msg.content
      }))
    })
    
    return response.content[0].type === 'text' ? response.content[0].text : ''
  } catch (error: any) {
    console.error('Claude API error:', error.message)
    if (error.status === 401) {
      return 'üö´ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Anthropic.'
    }
    if (error.status === 429) {
      return 'üö´ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤). –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    }
    throw error
  }
}

export async function POST(request: NextRequest) {
  try {
    const { messages, model = 'openai', mode = 'single' } = await request.json()

    // Check if any AI service is available
    const hasOpenAI = !!process.env.OPENAI_API_KEY
    const hasGemini = !!process.env.GEMINI_API_KEY
    const hasClaude = !!process.env.ANTHROPIC_API_KEY

    if (!hasOpenAI && !hasGemini && !hasClaude) {
      console.warn('No AI API keys found, using mock response')
      return NextResponse.json({
        content: '–Ø –≤–∞—à AI-—Ä–∏–µ–ª—Ç–æ—Ä SmartEstate! üè†\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, AI API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n‚Ä¢ –ü–æ–∏—Å–∫–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n‚Ä¢ –†–∞—Å—á–µ—Ç–æ–º –∏–ø–æ—Ç–µ–∫–∏  \n‚Ä¢ –û—Ü–µ–Ω–∫–æ–π –æ–±—ä–µ–∫—Ç–æ–≤\n‚Ä¢ –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!'
      })
    }

    // Single model mode
    if (mode === 'single') {
      let content = ''
      
      switch (model) {
        case 'openai':
          if (hasOpenAI) {
            content = await callOpenAI(messages)
          }
          break
        case 'gemini':
          if (hasGemini) {
            content = await callGemini(messages)
          }
          break
        case 'claude':
          if (hasClaude) {
            content = await callClaude(messages)
          }
          break
        default:
          // Fallback to available model
          if (hasOpenAI) {
            content = await callOpenAI(messages)
          } else if (hasGemini) {
            content = await callGemini(messages)
          } else if (hasClaude) {
            content = await callClaude(messages)
          }
      }

      return NextResponse.json({ 
        content: content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.',
        model: model,
        mode: 'single'
      })
    }

    // Consensus mode - get responses from all available models
    if (mode === 'consensus') {
      const responses = []
      
      if (hasOpenAI) {
        try {
          const response = await callOpenAI(messages)
          responses.push({ model: 'ChatGPT', content: response, status: 'success' })
        } catch (error) {
          console.error('OpenAI error:', error)
          responses.push({ model: 'ChatGPT', content: '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω', status: 'error' })
        }
      } else {
        responses.push({ model: 'ChatGPT', content: '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', status: 'not_configured' })
      }
      
      if (hasGemini) {
        try {
          const response = await callGemini(messages)
          responses.push({ model: 'Gemini', content: response, status: 'success' })
        } catch (error) {
          console.error('Gemini error:', error)
          responses.push({ model: 'Gemini', content: '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω', status: 'error' })
        }
      } else {
        responses.push({ model: 'Gemini', content: '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', status: 'not_configured' })
      }
      
      if (hasClaude) {
        try {
          const response = await callClaude(messages)
          responses.push({ model: 'Claude', content: response, status: 'success' })
        } catch (error) {
          console.error('Claude error:', error)
          responses.push({ model: 'Claude', content: '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω', status: 'error' })
        }
      } else {
        responses.push({ model: 'Claude', content: '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', status: 'not_configured' })
      }

      // Format consensus response
      let consensusContent = 'ü§ñ **–ö–æ–Ω—Å–µ–Ω—Å—É—Å AI-—Ä–∏–µ–ª—Ç–æ—Ä–æ–≤ SmartEstate:**\n\n'
      
      const workingModels = responses.filter(r => r.status === 'success')
      const errorModels = responses.filter(r => r.status !== 'success')
      
      responses.forEach((resp, index) => {
        const statusIcon = {
          'success': '‚úÖ',
          'error': '‚ùå', 
          'not_configured': '‚ö†Ô∏è'
        }[resp.status] || '‚ùì'
        
        consensusContent += `${statusIcon} **${resp.model}:**\n${resp.content}\n\n---\n\n`
      })
      
      if (workingModels.length > 1) {
        consensusContent += 'üí° **–û–±—â–∏–π —Å–æ–≤–µ—Ç:** –ù–µ—Å–∫–æ–ª—å–∫–æ AI —Å–æ–≥–ª–∞—Å–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö. –î–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º —Ä–∏–µ–ª—Ç–æ—Ä–æ–º!'
      } else if (workingModels.length === 1) {
        consensusContent += `üí° **–°–æ–≤–µ—Ç:** –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ ${workingModels[0].model}. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ API –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞.`
      } else {
        consensusContent += 'üö´ **–ü—Ä–æ–±–ª–µ–º–∞:** –ù–∏ –æ–¥–∏–Ω AI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.'
      }

      return NextResponse.json({ 
        content: consensusContent,
        responses: responses,
        model: 'consensus',
        mode: 'consensus'
      })
    }

    return NextResponse.json({ 
      content: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã',
      model: model,
      mode: mode
    })
  } catch (error) {
    console.error('OpenAI API error:', error)
    
    // Fallback response
    return NextResponse.json({
      content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º. üòî\n\n–ù–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:\n\nüè† –ü–æ–∏—Å–∫–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\nüí∞ –†–∞—Å—á–µ—Ç–æ–º –∏–ø–æ—Ç–µ–∫–∏\nüìä –û—Ü–µ–Ω–∫–æ–π –æ–±—ä–µ–∫—Ç–æ–≤\nüìÖ –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ!'
    }, { status: 200 })
  }
}