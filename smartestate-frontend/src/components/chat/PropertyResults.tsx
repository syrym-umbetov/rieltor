'use client'

import React, { useState, useMemo, useCallback } from 'react'
import {
    Box,
    Typography,
    Grid,
    Stack
} from '@mui/material'
import ReactMarkdown from 'react-markdown'
import PropertyCard from '../property/PropertyCard'
import PropertySelectionPanel from '../property/PropertySelectionPanel'
import { parsePropertyMarkdown, isPropertyContent, extractPropertyStats } from '@/utils/propertyParser'

interface PropertyData {
    id?: string
    title: string
    price: string
    address: string
    image: string
    link: string
    area?: string
    rooms?: number
    floor?: string
}

interface PropertyResultsProps {
    content: string
}


export default function PropertyResults({ content }: PropertyResultsProps) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    if (!isPropertyContent(content)) {
        return <ReactMarkdown>{content}</ReactMarkdown>
    }

    const properties = useMemo(() => parsePropertyMarkdown(content), [content])
    const stats = useMemo(() => extractPropertyStats(content), [content])
    const [selectedProperties, setSelectedProperties] = useState<{id: string | number, title: string, price: string}[]>([])
    const [selectionPanelExpanded, setSelectionPanelExpanded] = useState(false)

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π markdown
    if (properties.length === 0) {
        return <ReactMarkdown>{content}</ReactMarkdown>
    }

    const handlePropertySelect = useCallback((id: string | number, selected: boolean) => {
        const property = properties.find(p => p.id === id || properties.indexOf(p) === id)
        if (!property) return

        setSelectedProperties(prev => {
            if (selected) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
                const alreadySelected = prev.some(p =>
                    p.id === id ||
                    (p.title === property.title && p.price === property.price)
                )

                if (alreadySelected) {
                    console.log('üö´ –û–±—ä–µ–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω:', property.title)
                    return prev // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                }

                console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', property.title)
                return [
                    ...prev,
                    {
                        id: id,
                        title: property.title,
                        price: property.price
                    }
                ]
            } else {
                console.log('‚ùå –£–±–∏—Ä–∞–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', property.title)
                return prev.filter(p => p.id !== id)
            }
        })
    }, [properties])

    const handleClearAll = () => {
        setSelectedProperties([])
    }

    const handleRemoveProperty = (id: string | number) => {
        setSelectedProperties(prev => prev.filter(p => p.id !== id))
    }

    const isSelected = useCallback((id: string | number) => {
        return selectedProperties.some(p => p.id === id)
    }, [selectedProperties])

    return (
        <Box sx={{ width: '100%' }}>
            {/* –ü–∞–Ω–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ */}
            <PropertySelectionPanel
                selectedProperties={selectedProperties}
                onClearAll={handleClearAll}
                onRemoveProperty={handleRemoveProperty}
                expanded={selectionPanelExpanded}
                onToggleExpand={() => setSelectionPanelExpanded(!selectionPanelExpanded)}
            />

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Box sx={{ mb: 3, p: 3, bgcolor: 'primary.main', borderRadius: 3, color: 'white' }}>
                <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
                    üè† –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                    {stats?.location && (
                        <Typography component="span" variant="body2" sx={{ opacity: 0.8, ml: 1 }}>
                            ‚Ä¢ {stats.location}
                        </Typography>
                    )}
                </Typography>
                <Stack direction="row" spacing={2} alignItems="center" flexWrap="wrap">
                    <Typography variant="body2" sx={{ opacity: 0.9 }}>
                        {stats?.totalFound || properties.length} {(stats?.totalFound || properties.length) === 1 ? '–æ–±—ä–µ–∫—Ç' : (stats?.totalFound || properties.length) < 5 ? '–æ–±—ä–µ–∫—Ç–∞' : '–æ–±—ä–µ–∫—Ç–æ–≤'} –Ω–∞–π–¥–µ–Ω–æ
                    </Typography>
                    {stats?.withImages > 0 && (
                        <Typography variant="body2" sx={{ opacity: 0.8 }}>
                            üì∏ {stats.withImages} —Å —Ñ–æ—Ç–æ
                        </Typography>
                    )}
                    {selectedProperties.length > 0 && (
                        <Typography variant="body2" sx={{ opacity: 0.9, fontWeight: 600 }}>
                            ‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selectedProperties.length}
                        </Typography>
                    )}
                </Stack>
            </Box>

            {/* –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
            <Grid container spacing={2}>
                {properties.map((property, index) => (
                    <Grid item xs={12} sm={6} md={4} key={property.id || index}>
                        <PropertyCard
                            property={property}
                            index={index}
                            selected={isSelected(property.id || index)}
                            onSelect={handlePropertySelect}
                            compact={true}
                        />
                    </Grid>
                ))}
            </Grid>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Box sx={{
                mt: 3,
                p: 3,
                bgcolor: 'grey.50',
                borderRadius: 3,
                textAlign: 'center',
                border: '1px solid',
                borderColor: 'grey.200'
            }}>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 1, fontWeight: 500 }}>
                    üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                </Typography>
                <Typography variant="caption" color="text.secondary">
                    –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫—É
                </Typography>
            </Box>
        </Box>
    )
}