/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ markdown –æ—Ç–≤–µ—Ç–æ–≤ AI
 */

export interface ParsedProperty {
    id?: string
    title: string
    price: string
    address: string
    image?: string
    link: string
    area?: string
    rooms?: number
    floor?: string
}

/**
 * –ü–∞—Ä—Å–∏—Ç markdown —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */
export function parsePropertyMarkdown(content: string): ParsedProperty[] {
    const properties: ParsedProperty[] = []
    const seenProperties = new Set<string>() // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', content.substring(0, 200) + '...')

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    let sections: string[] = []

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º ---
    if (content.includes('---')) {
        sections = content.split('---').filter(section => section.trim())
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const numberPattern = /^\*\*\d+\./gm
        const matches = Array.from(content.matchAll(numberPattern))

        if (matches.length > 1) {
            sections = []
            for (let i = 0; i < matches.length; i++) {
                const start = matches[i].index!
                const end = i < matches.length - 1 ? matches[i + 1].index! : content.length
                const section = content.substring(start, end).trim()
                if (section) {
                    sections.push(section)
                }
            }
        } else {
            // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª
            sections = [content]
        }
    }

    sections.forEach((section, index) => {
        const lines = section.split('\n').filter(line => line.trim())
        const property: Partial<ParsedProperty> = {}

        lines.forEach(line => {
            const trimmed = line.trim()

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
            if (trimmed.match(/^\*\*\d+\./)) {
                // –§–æ—Ä–º–∞—Ç: **1. –ù–∞–∑–≤–∞–Ω–∏–µ**
                property.title = trimmed.replace(/^\*\*\d+\.\s*/, '').replace(/\*\*$/, '').trim()
            } else if (trimmed.startsWith('üè¢ **') || trimmed.startsWith('üè† **')) {
                // –§–æ—Ä–º–∞—Ç: üè¢ **–ù–∞–∑–≤–∞–Ω–∏–µ**
                property.title = trimmed.replace(/üè¢\s*\*\*|üè†\s*\*\*/, '').replace(/\*\*$/, '').trim()
            } else if (trimmed.startsWith('**') && trimmed.endsWith('**') && !trimmed.includes('–º–ª–Ω') && !trimmed.includes('—Ç—ã—Å') && !property.title) {
                // –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                const candidateTitle = trimmed.replace(/^\*\*/, '').replace(/\*\*$/, '').trim()
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if (candidateTitle.length > 5 && !candidateTitle.match(/^\d+$/)) {
                    property.title = candidateTitle
                }
            }

            // –¶–µ–Ω–∞
            if (trimmed.startsWith('üí∞ –¶–µ–Ω–∞:')) {
                property.price = trimmed.replace('üí∞ –¶–µ–Ω–∞:', '').trim()
            } else if (trimmed.match(/üí∞.*?[\d\s,.]+(–º–ª–Ω|—Ç—ã—Å)/)) {
                const priceMatch = trimmed.match(/üí∞.*?([\d\s,.]+\s*(–º–ª–Ω|—Ç—ã—Å)\s*‚Ç∏?)/)
                if (priceMatch) {
                    property.price = priceMatch[1].trim()
                }
            }

            // –ê–¥—Ä–µ—Å
            if (trimmed.startsWith('üìç –ê–¥—Ä–µ—Å:')) {
                property.address = trimmed.replace('üìç –ê–¥—Ä–µ—Å:', '').trim()
            }

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
            if (trimmed.startsWith('üö™ –ö–æ–º–Ω–∞—Ç:')) {
                const roomsMatch = trimmed.match(/üö™ –ö–æ–º–Ω–∞—Ç:\s*(\d+)/)
                if (roomsMatch) {
                    property.rooms = parseInt(roomsMatch[1])
                }
            }

            // –ü–ª–æ—â–∞–¥—å
            if (trimmed.startsWith('üìê –ü–ª–æ—â–∞–¥—å:')) {
                const areaMatch = trimmed.match(/üìê –ü–ª–æ—â–∞–¥—å:\s*([\d.]+)\s*–º¬≤?/)
                if (areaMatch) {
                    property.area = areaMatch[1]
                }
            }

            // –≠—Ç–∞–∂
            if (trimmed.startsWith('üè¢ –≠—Ç–∞–∂:')) {
                const floorMatch = trimmed.match(/üè¢ –≠—Ç–∞–∂:\s*([\d/]+)/)
                if (floorMatch) {
                    property.floor = floorMatch[1]
                }
            }

            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ)
            if (trimmed.includes('![') && trimmed.includes('](') && !property.image) {
                const imageMatch = trimmed.match(/!\[.*?\]\((.*?)\)/)
                if (imageMatch && imageMatch[1]) {
                    property.image = imageMatch[1]
                }
            }

            // –°—Å—ã–ª–∫–∞
            if (trimmed.includes('[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]') || trimmed.includes('[üîó]')) {
                const linkMatch = trimmed.match(/\[(–ü–æ–¥—Ä–æ–±–Ω–µ–µ|üîó)\]\((.*?)\)/)
                if (linkMatch && linkMatch[2]) {
                    property.link = linkMatch[2]
                }
            }
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (property.title && (property.price || property.address)) {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const uniqueKey = `${property.title}_${property.price}_${property.address}`.replace(/\s+/g, '').toLowerCase()

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (seenProperties.has(uniqueKey)) {
                return
            }
            seenProperties.add(uniqueKey)

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!property.address) property.address = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
            if (!property.price) property.price = '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            if (!property.link) property.link = '#'

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            property.id = `property_${properties.length}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

            properties.push(property as ParsedProperty)
        }
    })

    console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${properties.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ ${sections.length} —Å–µ–∫—Ü–∏–π`)
    console.log('üìã –û–±—ä–µ–∫—Ç—ã:', properties.map(p => ({ title: p.title?.substring(0, 30), price: p.price })))

    return properties
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */
export function isPropertyContent(content: string): boolean {
    const propertyKeywords = [
        'üè†', 'üè¢', 'üí∞', 'üìç', 'üö™', 'üìê',
        '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–æ–±—ä–µ–∫—Ç',
        '—Ü–µ–Ω–∞', '–∞–¥—Ä–µ—Å', '–∫–æ–º–Ω–∞—Ç', '–ø–ª–æ—â–∞–¥—å',
        '–º–ª–Ω ‚Ç∏', '—Ç—ã—Å ‚Ç∏', 'krisha.kz'
    ]

    return propertyKeywords.some(keyword =>
        content.toLowerCase().includes(keyword.toLowerCase())
    )
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
export function formatPrice(price: string | number): string {
    if (typeof price === 'string') {
        // –ï—Å–ª–∏ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞
        if (price.includes('–º–ª–Ω') || price.includes('—Ç—ã—Å')) {
            return price.includes('‚Ç∏') ? price : `${price} ‚Ç∏`
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        const numMatch = price.match(/([\d\s,\.]+)/)
        if (!numMatch) return price

        const num = parseInt(numMatch[1].replace(/[\s,\.]/g, ''))
        return formatPrice(num)
    }

    const num = price as number

    if (num >= 1000000) {
        const millions = num / 1000000
        if (millions >= 10) {
            return `${Math.round(millions)} –º–ª–Ω ‚Ç∏`
        } else {
            return `${millions.toFixed(1)} –º–ª–Ω ‚Ç∏`
        }
    } else if (num >= 1000) {
        const thousands = num / 1000
        return `${Math.round(thousands)} —Ç—ã—Å ‚Ç∏`
    }

    return `${num.toLocaleString('ru-RU')} ‚Ç∏`
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export function extractPropertyStats(content: string): {
    totalFound: number
    withImages: number
    location?: string
} | null {
    // –ò—â–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalMatch = content.match(/–ù–∞–π–¥–µ–Ω–æ (\d+) –æ–±—ä–µ–∫—Ç/i) ||
                      content.match(/–ü–æ–∫–∞–∑–∞–Ω–æ –≤—Å–µ—Ö (\d+) –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤/i) ||
                      content.match(/(\d+) –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/i)

    const imagesMatch = content.match(/–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: (\d+)/i) ||
                       content.match(/(\d+) —Å —Ñ–æ—Ç–æ/i)

    const locationMatch = content.match(/–≤ –≥–æ—Ä–æ–¥–µ \*\*?([^*\n]+)\*\*?/i) ||
                         content.match(/–≥–æ—Ä–æ–¥[–µ–∞]?:?\s*([–ê-–Ø–∞-—è-]+)/i)

    if (!totalMatch) return null

    return {
        totalFound: parseInt(totalMatch[1]),
        withImages: imagesMatch ? parseInt(imagesMatch[1]) : 0,
        location: locationMatch ? locationMatch[1].trim() : undefined
    }
}