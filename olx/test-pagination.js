// test-pagination.js - –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ OLX –ø–∞—Ä—Å–µ—Ä–∞
async function testPagination() {
    console.log('üìÑ –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ OLX –ø–∞—Ä—Å–µ—Ä–∞\n');

    // –ñ–¥–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ rate limiting
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥...');
    await new Promise(resolve => setTimeout(resolve, 20000));

    const testFilters = {
        city: 'almaty'
    };

    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        console.log('üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 1...');
        const response1 = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: { ...testFilters, page: 1 }
            })
        });

        if (!response1.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${response1.status}`);
            return;
        }

        const data1 = await response1.json();
        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${data1.data.properties.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        console.log(`üîó URL: ${data1.data.searchUrl}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const page1Ids = new Set(data1.data.properties.map(p => p.propertyId));
        console.log(`üÜî –ü–µ—Ä–≤—ã–µ 3 ID —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1: ${Array.from(page1Ids).slice(0, 3).join(', ')}`);

        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2...');
        await new Promise(resolve => setTimeout(resolve, 15000));

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        console.log('üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 2...');
        const response2 = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: { ...testFilters, page: 2 }
            })
        });

        if (!response2.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${response2.status}`);
            return;
        }

        const data2 = await response2.json();
        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${data2.data.properties.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        console.log(`üîó URL: ${data2.data.searchUrl}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä page=2
        if (data2.data.searchUrl.includes('page=2')) {
            console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - URL —Å–æ–¥–µ—Ä–∂–∏—Ç page=2');
        } else {
            console.log('‚ö†Ô∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç page=2');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const page2Ids = new Set(data2.data.properties.map(p => p.propertyId));
        console.log(`üÜî –ü–µ—Ä–≤—ã–µ 3 ID —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2: ${Array.from(page2Ids).slice(0, 3).join(', ')}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        const intersection = new Set([...page1Ids].filter(id => page2Ids.has(id)));
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${page1Ids.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${page2Ids.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        console.log(`   üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏: ${intersection.size}`);

        if (intersection.size === 0) {
            console.log('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è');
        } else {
            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏');
            console.log(`üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID: ${Array.from(intersection).join(', ')}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        const page1WithImages = data1.data.properties.filter(p => p.images.length > 0);
        const page2WithImages = data2.data.properties.filter(p => p.images.length > 0);

        console.log(`\nüñºÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${page1WithImages.length}/${data1.data.properties.length} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (${Math.round((page1WithImages.length / data1.data.properties.length) * 100)}%)`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${page2WithImages.length}/${data2.data.properties.length} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (${Math.round((page2WithImages.length / data2.data.properties.length) * 100)}%)`);

        // –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:`);
        console.log(`\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1:`);
        data1.data.properties.slice(0, 2).forEach((prop, index) => {
            console.log(`   ${index + 1}. ${prop.title.substring(0, 50)}... - ${prop.price}`);
            console.log(`      üÜî ID: ${prop.propertyId}`);
            console.log(`      üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${prop.images.length}`);
        });

        console.log(`\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2:`);
        data2.data.properties.slice(0, 2).forEach((prop, index) => {
            console.log(`   ${index + 1}. ${prop.title.substring(0, 50)}... - ${prop.price}`);
            console.log(`      üÜî ID: ${prop.propertyId}`);
            console.log(`      üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${prop.images.length}`);
        });

        console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:`);
        if (data2.data.searchUrl.includes('page=2') && intersection.size === 0) {
            console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            console.log('‚úÖ –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
            console.log('‚úÖ URL –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º page');
        } else {
            console.log('‚ö†Ô∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', error.message);
    }
}

testPagination().catch(console.error);