// test-simple-search.js - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞
async function testSimpleSearch() {
    console.log('üîß –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ OLX\n');

    // –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const testFilters = {
        city: 'almaty'
        // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã–º–∏ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    };

    console.log('üìã –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞:');
    console.log(`üèôÔ∏è –ì–æ—Ä–æ–¥: ${testFilters.city}`);
    console.log('üí∞ –¶–µ–Ω–∞: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
    console.log('üö™ –ö–æ–º–Ω–∞—Ç—ã: –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n');

    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫...');

        const response = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: testFilters
            })
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status);
            const errorData = await response.text();
            console.error('–û—Ç–≤–µ—Ç:', errorData);
            return;
        }

        const data = await response.json();
        console.log('\n‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω!');
        console.log('='.repeat(60));

        if (data.data && data.data.properties) {
            const properties = data.data.properties;
            console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${properties.length}`);
            console.log(`üîó URL –ø–æ–∏—Å–∫–∞: ${data.data.searchUrl}`);
            console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${data._stats.responseTime}ms\n`);

            if (properties.length > 0) {
                console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n');

                properties.forEach((property, index) => {
                    console.log(`${index + 1}. ${property.title}`);
                    console.log(`   üí∞ –¶–µ–Ω–∞: ${property.price}`);
                    console.log(`   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${property.location}`);
                    if (property.area) console.log(`   üìê –ü–ª–æ—â–∞–¥—å: ${property.area}`);
                    if (property.rooms) console.log(`   üö™ –ö–æ–º–Ω–∞—Ç—ã: ${property.rooms}`);
                    console.log(`   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${property.images.length}`);
                    if (property.url) console.log(`   üîó –°—Å—ã–ª–∫–∞: ${property.url.substring(0, 80)}...`);
                    console.log('');
                });

                console.log(`\nüéØ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ ${properties.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!`);
            } else {
                console.log('‚ÑπÔ∏è  –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ HTML.');
            }
        } else {
            console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', data);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);

        if (error.code === 'ECONNREFUSED') {
            console.error('\nüö® –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
        }
    }
}

testSimpleSearch().catch(console.error);