// test-multiple-urls.js - –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ URL
const fs = require('fs');

async function testMultipleUrls() {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ OLX —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ URL\n');

    // –ß–∏—Ç–∞–µ–º URL –∏–∑ —Ñ–∞–π–ª–∞
    const urlsContent = fs.readFileSync('./urls.txt', 'utf-8');
    const urls = urlsContent
        .split('\n')
        .filter(url => url.trim() && !url.startsWith('#'))
        .slice(0, 3); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Ç–µ—Å—Ç–∞

    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${urls.length} URL:\n`);

    for (let i = 0; i < urls.length; i++) {
        const url = urls[i].trim();
        console.log(`\n${'='.repeat(80)}`);
        console.log(`üîç –¢–µ—Å—Ç ${i + 1}/${urls.length}: ${url}`);
        console.log(`${'='.repeat(80)}`);

        try {
            const response = await fetch('http://localhost:3000/api/parse-olx', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url })
            });

            if (!response.ok) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status} ${response.statusText}`);
                const errorData = await response.text();
                console.error('–û—Ç–≤–µ—Ç:', errorData);
                continue;
            }

            const data = await response.json();
            const property = data.data;

            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
            console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${property.title}`);
            console.log(`üí∞ –¶–µ–Ω–∞: ${property.price}`);
            console.log(`üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${property.location}`);
            console.log(`üìê –ü–ª–æ—â–∞–¥—å: ${property.area || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`üö™ –ö–æ–º–Ω–∞—Ç—ã: ${property.rooms || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${property.images.length}`);
            console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${data._stats.responseTime}ms`);

            if (property.description && property.description.length > 100) {
                console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${property.description.substring(0, 100)}...`);
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (i < urls.length - 1) {
                console.log('\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...');
                await new Promise(resolve => setTimeout(resolve, 3000));
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
        }
    }

    console.log(`\n${'='.repeat(80)}`);
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`${'='.repeat(80)}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function checkApiHealth() {
    try {
        const response = await fetch('http://localhost:3000/api/parse-olx');
        return response.ok;
    } catch (error) {
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
        return false;
    }
}

async function main() {
    if (!(await checkApiHealth())) {
        return;
    }

    await testMultipleUrls();
}

main().catch(console.error);