// test-json-ld-images.js - –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON-LD
async function testJsonLdImages() {
    console.log('üî• –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON-LD\n');

    // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ö–æ–¥–∞ rate limiting
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...');
    await new Promise(resolve => setTimeout(resolve, 30000));

    const testFilters = {
        city: 'almaty'
    };

    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫...');

        const response = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: testFilters
            })
        });

        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            if (response.status === 429) {
                console.error('‚è≥ Rate limit. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            }
            return;
        }

        const data = await response.json();

        if (data.data && data.data.properties) {
            const properties = data.data.properties;
            console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${properties.length}`);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const withImages = properties.filter(p => p.images.length > 0);
            const multipleImages = properties.filter(p => p.images.length > 1);
            const highQualityImages = properties.filter(p =>
                p.images.length > 0 &&
                (p.images[0].includes('800x') || p.images[0].includes('600x') || p.images[0].includes('510x'))
            );

            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
            console.log(`   üñºÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages.length}/${properties.length} (${Math.round((withImages.length / properties.length) * 100)}%)`);
            console.log(`   üé≠ –° –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${multipleImages.length}/${withImages.length}`);
            console.log(`   ‚ú® –° –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º: ${highQualityImages.length}/${withImages.length}`);

            // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
            properties.slice(0, 5).forEach((property, index) => {
                console.log(`\n${index + 1}. ${property.title.substring(0, 50)}...`);
                console.log(`   üí∞ ${property.price}`);
                console.log(`   üìç ${property.location}`);
                console.log(`   üîó ${property.url}`);
                console.log(`   üÜî ID: ${property.propertyId}`);

                if (property.images.length > 0) {
                    console.log(`   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${property.images.length}`);
                    property.images.forEach((img, imgIndex) => {
                        console.log(`     ${imgIndex + 1}. ${img}`);

                        // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
                        if (img.includes('800x') || img.includes('600x')) {
                            console.log(`       ‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`);
                        } else if (img.includes('510x')) {
                            console.log(`       üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ`);
                        } else if (img.includes('216x') || img.includes('150x')) {
                            console.log(`       ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`);
                        } else {
                            console.log(`       ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`);
                        }
                    });
                } else {
                    console.log(`   ‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
                }
            });

            // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            const imageScore = Math.round((withImages.length / properties.length) * 100);
            console.log(`\nüìà –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageScore}%`);

            if (imageScore >= 80) {
                console.log('üéâ –û—Ç–ª–∏—á–Ω–æ! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            } else if (imageScore >= 60) {
                console.log('üëç –•–æ—Ä–æ—à–æ! –ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            } else if (imageScore >= 40) {
                console.log('üîß –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å');
            } else {
                console.log('‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, –Ω—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const allImages = properties.flatMap(p => p.images);
            const uniqueImages = new Set(allImages);
            console.log(`\nüéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${uniqueImages.size} –∏–∑ ${allImages.length} (${Math.round((uniqueImages.size / allImages.length) * 100)}% —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)`);

        } else {
            console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

testJsonLdImages().catch(console.error);