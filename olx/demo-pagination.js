// demo-pagination.js - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async function demoPagination() {
    console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ OLX –ø–∞—Ä—Å–µ—Ä–∞\n');

    const testFilters = {
        city: 'almaty'
    };

    try {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        console.log('üì° –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1...');
        const response1 = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: { ...testFilters, page: 1 }
            })
        });

        const data1 = await response1.json();
        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${data1.data.totalFound} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        console.log(`üîó URL: ${data1.data.searchUrl}`);
        console.log(`üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è:`, data1.data.pagination);

        console.log(`\nüìã –ü–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1:`);
        data1.data.properties.slice(0, 3).forEach((prop, index) => {
            console.log(`   ${index + 1}. ${prop.title.substring(0, 40)}... - ${prop.price}`);
            console.log(`      üÜî ${prop.propertyId} | üñºÔ∏è ${prop.images.length} —Ñ–æ—Ç–æ`);
        });

        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥...');
        await new Promise(resolve => setTimeout(resolve, 20000));

        console.log('üì° –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2...');
        const response2 = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: { ...testFilters, page: 2 }
            })
        });

        const data2 = await response2.json();
        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${data2.data.totalFound} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        console.log(`üîó URL: ${data2.data.searchUrl}`);
        console.log(`üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è:`, data2.data.pagination);

        console.log(`\nüìã –ü–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2:`);
        data2.data.properties.slice(0, 3).forEach((prop, index) => {
            console.log(`   ${index + 1}. ${prop.title.substring(0, 40)}... - ${prop.price}`);
            console.log(`      üÜî ${prop.propertyId} | üñºÔ∏è ${prop.images.length} —Ñ–æ—Ç–æ`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ URL:`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${data1.data.searchUrl.includes('page=') ? '—Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä page' : '–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ page (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${data2.data.searchUrl.includes('page=2') ? '—Å–æ–¥–µ—Ä–∂–∏—Ç page=2 ‚úÖ' : '–ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç page=2 ‚ùå'}`);

        console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
        if (data2.data.searchUrl.includes('page=2')) {
            console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            console.log('‚úÖ URL –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º page');
            console.log('‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏');
        } else {
            console.log('‚ùå –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
        }

        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   üè† –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${data1.data.totalFound + data2.data.totalFound}`);
        console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 2`);
        console.log(`   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ~40 —Å–µ–∫—É–Ω–¥ (—Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏)`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
}

demoPagination().catch(console.error);