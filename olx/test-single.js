// test-single.js - –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ URL
const https = require('https');

// –¢–µ—Å—Ç–æ–≤—ã–π URL (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è OLX)
const TEST_URL = 'https://olx.kz/d/nedvizhimost/prodazha-kvartir/almaty/prodam-1-komnatnuyu-kvartiru-v-almaty-IDyYK8N.html';

async function testSingleUrl() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ OLX...');
    console.log('URL:', TEST_URL);

    try {
        const response = await fetch('http://localhost:3000/api/parse-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                url: TEST_URL
            })
        });

        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status} ${response.statusText}`);
            const errorData = await response.text();
            console.error('–û—Ç–≤–µ—Ç:', errorData);
            return;
        }

        const data = await response.json();

        console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log('='.repeat(50));
        console.log('üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:', data.data.title);
        console.log('üí∞ –¶–µ–Ω–∞:', data.data.price);
        console.log('üìç –ì–æ—Ä–æ–¥:', data.data.city);
        console.log('üè† –†–∞–π–æ–Ω:', data.data.district);
        console.log('üìê –ü–ª–æ—â–∞–¥—å:', data.data.area);
        console.log('üö™ –ö–æ–º–Ω–∞—Ç—ã:', data.data.rooms);
        console.log('üì± –ö–æ–Ω—Ç–∞–∫—Ç:', data.data.contact?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', data.data.images.length);
        console.log('üìä ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', data.data.propertyId || '–Ω–µ –Ω–∞–π–¥–µ–Ω');

        if (data.data.images.length > 0) {
            console.log('üñºÔ∏è –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', data.data.images[0]);
        }

        console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:');
        console.log('‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:', data._stats.responseTime + 'ms');
        console.log('üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:', data._stats.requestsToday);
        console.log('üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', data._stats.totalRequests);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);

        if (error.code === 'ECONNREFUSED') {
            console.error('\nüö® –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: npm run dev');
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function checkApiHealth() {
    try {
        const response = await fetch('http://localhost:3000/api/parse-olx');

        if (response.ok) {
            console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        } else {
            console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.status);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error.message);
        return false;
    }
}

async function main() {
    console.log('OLX Parser - –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ URL\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    const apiAvailable = await checkApiHealth();
    if (!apiAvailable) {
        console.log('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
        return;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    await testSingleUrl();
}

main().catch(console.error);