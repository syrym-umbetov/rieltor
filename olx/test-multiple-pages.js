// test-multiple-pages.js - –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
async function testMultiplePages() {
    console.log('üìö –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü\n');

    const testFilters = {
        city: 'almaty'
    };

    const allProperties = [];
    const allIds = new Set();
    const pages = [1, 2, 3]; // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    try {
        for (const pageNum of pages) {
            console.log(`\nüì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum}...`);

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (pageNum > 1) {
                console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥...');
                await new Promise(resolve => setTimeout(resolve, 20000));
            }

            const response = await fetch('http://localhost:3001/api/search-olx', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    filters: { ...testFilters, page: pageNum }
                })
            });

            if (!response.ok) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: ${response.status}`);
                continue;
            }

            const data = await response.json();
            const properties = data.data.properties;

            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: ${properties.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            console.log(`üîó URL: ${data.data.searchUrl}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            let duplicates = 0;
            properties.forEach(property => {
                if (allIds.has(property.propertyId)) {
                    duplicates++;
                } else {
                    allIds.add(property.propertyId);
                    allProperties.push({
                        ...property,
                        page: pageNum
                    });
                }
            });

            console.log(`üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}: ${duplicates}`);
            console.log(`üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${allProperties.length}`);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const withImages = properties.filter(p => p.images.length > 0);
            console.log(`üñºÔ∏è –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages.length}/${properties.length} (${Math.round((withImages.length / properties.length) * 100)}%)`);
        }

        console.log(`\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   üìö –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${pages.length}`);
        console.log(`   üè† –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${allProperties.length}`);
        console.log(`   üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: ${allIds.size}`);

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        const byPage = {};
        allProperties.forEach(prop => {
            if (!byPage[prop.page]) byPage[prop.page] = [];
            byPage[prop.page].push(prop);
        });

        console.log(`\nüìÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:`);
        Object.keys(byPage).forEach(page => {
            const pageProps = byPage[page];
            const withImages = pageProps.filter(p => p.images.length > 0);
            console.log(`   –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: ${pageProps.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, ${withImages.length} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
        });

        // –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log(`\nüéØ –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`);
        Object.keys(byPage).forEach(page => {
            console.log(`\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}:`);
            byPage[page].slice(0, 2).forEach((prop, index) => {
                console.log(`   ${index + 1}. ${prop.title.substring(0, 45)}...`);
                console.log(`      üí∞ ${prop.price}`);
                console.log(`      üìç ${prop.location}`);
                console.log(`      üÜî ${prop.propertyId}`);
                console.log(`      üñºÔ∏è ${prop.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
            });
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        const totalWithImages = allProperties.filter(p => p.images.length > 0).length;
        const averageImagesPerProperty = allProperties.reduce((sum, p) => sum + p.images.length, 0) / allProperties.length;

        console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:`);
        console.log(`   üñºÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${totalWithImages}/${allProperties.length} (${Math.round((totalWithImages / allProperties.length) * 100)}%)`);
        console.log(`   üì∏ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${averageImagesPerProperty.toFixed(1)}`);

        // –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ URL
        const uniqueUrls = new Set(allProperties.map(p => p.url));
        console.log(`   üîó –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL: ${uniqueUrls.size}/${allProperties.length}`);

        if (uniqueUrls.size === allProperties.length) {
            console.log('‚úÖ –í—Å–µ URL —É–Ω–∏–∫–∞–ª—å–Ω—ã!');
        } else {
            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è URL');
        }

        console.log(`\nüéâ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!`);
        console.log(`üìö –°–æ–±—Ä–∞–Ω–æ ${allProperties.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

testMultiplePages().catch(console.error);