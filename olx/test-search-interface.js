// test-search-interface.js - –¢–µ—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const fs = require('fs');

async function testSearchAPI() {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ API OLX\n');

    const testFilters = {
        priceMin: '10000000',
        priceMax: '25000000',
        rooms: '2',
        city: 'almaty'
    };

    console.log('üìã –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞:');
    console.log(`üí∞ –¶–µ–Ω–∞: ${testFilters.priceMin} - ${testFilters.priceMax} —Ç–≥`);
    console.log(`üö™ –ö–æ–º–Ω–∞—Ç—ã: ${testFilters.rooms}`);
    console.log(`üèôÔ∏è –ì–æ—Ä–æ–¥: ${testFilters.city}\n`);

    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫...');

        const response = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: testFilters
            })
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status);
            const errorData = await response.text();
            console.error('–û—Ç–≤–µ—Ç:', errorData);
            return;
        }

        const data = await response.json();
        console.log('\n‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω!');
        console.log('='.repeat(60));

        if (data.data && data.data.properties) {
            const properties = data.data.properties;
            console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${properties.length}`);
            console.log(`üîó URL –ø–æ–∏—Å–∫–∞: ${data.data.searchUrl}`);
            console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${data._stats.responseTime}ms\n`);

            if (properties.length > 0) {
                console.log('üìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n');

                properties.slice(0, 3).forEach((property, index) => {
                    console.log(`${index + 1}. ${property.title}`);
                    console.log(`   üí∞ –¶–µ–Ω–∞: ${property.price}`);
                    console.log(`   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${property.location}`);
                    if (property.area) console.log(`   üìê –ü–ª–æ—â–∞–¥—å: ${property.area}`);
                    if (property.rooms) console.log(`   üö™ –ö–æ–º–Ω–∞—Ç—ã: ${property.rooms}`);
                    console.log(`   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${property.images.length}`);
                    if (property.url) console.log(`   üîó –°—Å—ã–ª–∫–∞: ${property.url}`);
                    console.log('');
                });
            } else {
                console.log('‚ÑπÔ∏è  –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤');
            }
        } else {
            console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', data);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);

        if (error.code === 'ECONNREFUSED') {
            console.error('\nüö® –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
        }
    }
}

async function testSingleParsingAPI() {
    console.log('\n' + '='.repeat(60));
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n');

    const testUrl = 'https://olx.kz/d/obyavlenie/dvuhkomnatnaya-kvartira-IDqgDUJ.html';

    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥...');
        console.log('üîó URL:', testUrl);

        const response = await fetch('http://localhost:3001/api/parse-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ url: testUrl })
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status);
            const errorData = await response.text();
            console.error('–û—Ç–≤–µ—Ç:', errorData);
            return;
        }

        const data = await response.json();
        console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!');
        console.log('='.repeat(60));

        const property = data.data;
        console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${property.title}`);
        console.log(`üí∞ –¶–µ–Ω–∞: ${property.price}`);
        console.log(`üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${property.location}`);
        if (property.area) console.log(`üìê –ü–ª–æ—â–∞–¥—å: ${property.area}`);
        if (property.rooms) console.log(`üö™ –ö–æ–º–Ω–∞—Ç—ã: ${property.rooms}`);
        console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${property.images.length}`);
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${data._stats.responseTime}ms`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

async function testAPIHealth() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–∏—Å–∫–æ–≤–æ–º—É API (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö)
        const searchInfoResponse = await fetch('http://localhost:3001/api/search-olx');

        if (searchInfoResponse.ok) {
            const searchInfo = await searchInfoResponse.json();
            console.log('‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω');
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:', searchInfo.availableFilters.cities.map(c => c.label).join(', '));
        } else {
            console.log('‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', searchInfoResponse.status);
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API –ø–∞—Ä—Å–∏–Ω–≥–∞
        const parseResponse = await fetch('http://localhost:3001/api/parse-olx');

        if (parseResponse.ok) {
            console.log('‚úÖ API –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        } else {
            console.log('‚ùå API –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', parseResponse.status);
            return false;
        }
    } catch (error) {
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return false;
    }
}

async function main() {
    console.log('üéØ OLX Parser - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    const apiAvailable = await testAPIHealth();
    if (!apiAvailable) {
        console.log('\nüö® –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
        return;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    await testSearchAPI();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await testSingleParsingAPI();

    console.log('\n' + '='.repeat(60));
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3001');
    console.log('='.repeat(60));
}

main().catch(console.error);