// debug-images.js - –û—Ç–ª–∞–¥–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function debugImageUrls() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π OLX\n');

    const testFilters = {
        city: 'almaty'
    };

    try {
        const response = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: testFilters
            })
        });

        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status);
            return;
        }

        const data = await response.json();

        if (data.data && data.data.properties) {
            const properties = data.data.properties;
            console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${properties.length}\n`);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imageUrls = [];
            const urlTypes = {};

            properties.forEach((property, index) => {
                if (property.images.length > 0) {
                    const imageUrl = property.images[0];
                    imageUrls.push(imageUrl);

                    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º URL –ø–æ –¥–æ–º–µ–Ω—É
                    if (imageUrl.includes('frankfurt.apollo.olxcdn.com')) {
                        urlTypes['OLX CDN'] = (urlTypes['OLX CDN'] || 0) + 1;
                    } else if (imageUrl.includes('olx')) {
                        urlTypes['OLX Other'] = (urlTypes['OLX Other'] || 0) + 1;
                    } else if (imageUrl.startsWith('data:')) {
                        urlTypes['Data URL'] = (urlTypes['Data URL'] || 0) + 1;
                    } else {
                        urlTypes['Other'] = (urlTypes['Other'] || 0) + 1;
                    }
                }
            });

            console.log('üìä –¢–∏–ø—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
            Object.entries(urlTypes).forEach(([type, count]) => {
                console.log(`   ${type}: ${count}`);
            });

            console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ URL:\n');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            const examples = {};
            properties.forEach((property) => {
                if (property.images.length > 0) {
                    const imageUrl = property.images[0];
                    let type;

                    if (imageUrl.includes('frankfurt.apollo.olxcdn.com')) {
                        type = 'OLX CDN';
                    } else if (imageUrl.includes('olx')) {
                        type = 'OLX Other';
                    } else if (imageUrl.startsWith('data:')) {
                        type = 'Data URL';
                    } else {
                        type = 'Other';
                    }

                    if (!examples[type]) {
                        examples[type] = {
                            title: property.title,
                            url: imageUrl
                        };
                    }
                }
            });

            Object.entries(examples).forEach(([type, example]) => {
                console.log(`${type}:`);
                console.log(`   –û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${example.title.substring(0, 50)}...`);
                console.log(`   URL: ${example.url}`);
                console.log('');
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 URL –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            console.log('üìã –ü–µ—Ä–≤—ã–µ 10 –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
            properties.slice(0, 10).forEach((property, index) => {
                if (property.images.length > 0) {
                    console.log(`${index + 1}. ${property.images[0]}`);
                } else {
                    console.log(`${index + 1}. [–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]`);
                }
            });

        } else {
            console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

debugImageUrls().catch(console.error);