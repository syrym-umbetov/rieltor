// final-test.js - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async function finalTest() {
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç OLX –ø–∞—Ä—Å–µ—Ä–∞\n');

    // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ rate limiting
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ö–æ–¥–∞ rate limiting...');
    await new Promise(resolve => setTimeout(resolve, 30000));

    const testFilters = {
        city: 'almaty'
    };

    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫...');

        const response = await fetch('http://localhost:3001/api/search-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filters: testFilters
            })
        });

        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            if (response.status === 429) {
                console.error('‚è≥ Rate limit. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ...');
            }
            return;
        }

        const data = await response.json();

        if (data.data && data.data.properties) {
            const properties = data.data.properties;
            console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: ${properties.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${data._stats.responseTime}ms`);
            console.log(`üîó URL –ø–æ–∏—Å–∫–∞: ${data.data.searchUrl}\n`);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const withImages = properties.filter(p => p.images.length > 0);
            const olxCdnImages = properties.filter(p =>
                p.images.length > 0 &&
                p.images[0].includes('frankfurt.apollo.olxcdn.com')
            );

            console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
            console.log(`   üè† –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${properties.length}`);
            console.log(`   üñºÔ∏è –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages.length}`);
            console.log(`   ‚úÖ –° –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ: ${olxCdnImages.length}`);
            console.log(`   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: –æ—Ç ${Math.min(...properties.map(p => {
                const priceMatch = p.price.match(/[\d\s]+/);
                return priceMatch ? parseInt(priceMatch[0].replace(/\s/g, '')) : 0;
            }).filter(p => p > 0)).toLocaleString()} –¥–æ ${Math.max(...properties.map(p => {
                const priceMatch = p.price.match(/[\d\s]+/);
                return priceMatch ? parseInt(priceMatch[0].replace(/\s/g, '')) : 0;
            })).toLocaleString()} —Ç–≥`);

            console.log('\nüéâ –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:');
            withImages.slice(0, 3).forEach((property, index) => {
                console.log(`\n${index + 1}. ${property.title}`);
                console.log(`   üí∞ ${property.price}`);
                console.log(`   üìç ${property.location}`);
                console.log(`   üñºÔ∏è ${property.images[0]}`);
            });

            console.log('\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3001');
            console.log('üéØ –ü–∞—Ä—Å–µ—Ä OLX –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

        } else {
            console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

finalTest().catch(console.error);