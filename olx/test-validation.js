// test-validation.js - –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
const https = require('https');

async function testUrlValidation() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL...');

    const testCases = [
        {
            name: '–ü—É—Å—Ç–æ–π URL',
            url: '',
            expectError: true,
            expectedStatus: 400
        },
        {
            name: '–ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º–µ–Ω',
            url: 'https://example.com/some-ad',
            expectError: true,
            expectedStatus: 400
        },
        {
            name: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω OLX (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL)',
            url: 'https://olx.kz/test-url',
            expectError: false, // API –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å URL, –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
            expectedStatus: 200
        }
    ];

    for (const testCase of testCases) {
        console.log(`\n‚ñ∂Ô∏è  –¢–µ—Å—Ç: ${testCase.name}`);
        console.log(`   URL: ${testCase.url || '(–ø—É—Å—Ç–æ–π)'}`);

        try {
            const response = await fetch('http://localhost:3000/api/parse-olx', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    url: testCase.url
                })
            });

            const data = await response.json();

            if (testCase.expectError) {
                if (!response.ok) {
                    console.log(`   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${response.status} - ${data.error}`);
                } else {
                    console.log(`   ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—Ö`);
                }
            } else {
                if (response.ok) {
                    console.log(`   ‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç (${response.status})`);
                } else {
                    console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${response.status} - ${data.error}`);
                }
            }
        } catch (error) {
            console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
        }
    }
}

async function testRateLimits() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limit...');

    try {
        // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for (let i = 0; i < 3; i++) {
            console.log(`   –ó–∞–ø—Ä–æ—Å ${i + 1}/3...`);

            const response = await fetch('http://localhost:3000/api/parse-olx', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    url: 'https://olx.kz/test'
                })
            });

            if (response.status === 429) {
                const data = await response.json();
                console.log(`   ‚úÖ Rate limit —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.error}`);
                console.log(`   ‚è≥ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑: ${data.retryAfter} —Å–µ–∫—É–Ω–¥`);
                break;
            } else {
                console.log(`   üìù –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limit: ${error.message}`);
    }
}

async function testApiStats() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

    try {
        const response = await fetch('http://localhost:3000/api/parse-olx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                url: 'https://olx.kz/test-stats'
            })
        });

        if (response.ok) {
            const data = await response.json();
            if (data._stats) {
                console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:`);
                console.log(`   üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${data._stats.responseTime}ms`);
                console.log(`   üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${data._stats.requestsToday}`);
                console.log(`   üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${data._stats.totalRequests}`);
            } else {
                console.log(`   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ`);
            }
        } else {
            console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${response.status}`);
        }
    } catch (error) {
        console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    }
}

async function main() {
    console.log('üîß OLX Parser - –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try {
        const healthCheck = await fetch('http://localhost:3000/api/parse-olx');
        if (!healthCheck.ok) {
            console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω\n');
    } catch (error) {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await testUrlValidation();
    await testRateLimits();
    await testApiStats();

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:');
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL');
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    console.log('‚úÖ Rate limiting');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API');
    console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ URL –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ urls.txt');
}

main().catch(console.error);