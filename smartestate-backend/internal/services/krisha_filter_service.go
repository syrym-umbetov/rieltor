package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
	"smartestate/internal/models"
)

const (
	N8N_WEBHOOK_URL_KRISHA = "https://umbetovs.app.n8n.cloud/webhook/analyze-realtor"
)

// N8nWebhookPayloadKrisha —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ n8n
type N8nWebhookPayloadKrisha struct {
	FiltersUsed map[string]interface{}    `json:"filters_used"`
	Properties  []models.ParsedProperty   `json:"properties"`
	TotalFound  int                      `json:"total_found"`
}

// KrishaFilterService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ Krisha.kz
type KrishaFilterService struct {
	client *http.Client
}

// NewKrishaFilterService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
func NewKrishaFilterService() *KrishaFilterService {
	return &KrishaFilterService{
		client: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

// KrishaFilters - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Krisha
type KrishaFilters struct {
	City             string `json:"city"`              // almaty, nur-sultan, shymkent
	District         string `json:"district"`          // —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞
	PriceFrom        string `json:"priceFrom"`         // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
	PriceTo          string `json:"priceTo"`           // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
	Rooms            string `json:"rooms"`             // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
	AreaFrom         string `json:"areaFrom"`          // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
	AreaTo           string `json:"areaTo"`            // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
	KitchenAreaFrom  string `json:"kitchenAreaFrom"`   // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏
	KitchenAreaTo    string `json:"kitchenAreaTo"`     // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏
	FloorFrom        string `json:"floorFrom"`         // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂
	FloorTo          string `json:"floorTo"`           // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂
	FloorNotFirst    bool   `json:"floorNotFirst"`     // –∏—Å–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂
	FloorNotLast     bool   `json:"floorNotLast"`      // –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂
	HouseFloorFrom   string `json:"houseFloorFrom"`    // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞
	HouseFloorTo     string `json:"houseFloorTo"`      // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞
	YearFrom         string `json:"yearFrom"`          // –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç
	YearTo           string `json:"yearTo"`            // –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ
	HouseType        string `json:"houseType"`         // —Ç–∏–ø –¥–æ–º–∞
	WhoType          string `json:"whoType"`           // —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞
	HasPhoto         bool   `json:"hasPhoto"`          // —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ
	Complex          string `json:"complex"`           // –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å
	Page             int    `json:"page"`              // –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	CollectAllPages  bool   `json:"collectAllPages"`   // —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	MaxResults       int    `json:"maxResults"`        // –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
}

// KrishaResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
type KrishaResult struct {
	Properties   []models.ParsedProperty `json:"properties"`
	Total        int                     `json:"total"`
	TotalPages   int                     `json:"totalPages"`
	CurrentPage  int                     `json:"currentPage"`
	HasNextPage  bool                    `json:"hasNextPage"`
	URL          string                  `json:"url"`
	Filters      KrishaFilters           `json:"filters"`
}

// ParseWithFilters –ø–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
func (s *KrishaFilterService) ParseWithFilters(filters KrishaFilters) (*KrishaResult, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if filters.City == "" {
		return nil, fmt.Errorf("–≥–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	if filters.CollectAllPages {
		maxResults := filters.MaxResults
		if maxResults <= 0 {
			maxResults = 200 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200
		}
		log.Printf("üîÑ Krisha Filter: –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ª–∏–º–∏—Ç: %d", maxResults)
		return s.collectAllPages(filters, maxResults)
	}

	// –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	return s.parseSinglePage(filters)
}

// parseSinglePage –ø–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
func (s *KrishaFilterService) parseSinglePage(filters KrishaFilters) (*KrishaResult, error) {
	// –°—Ç—Ä–æ–∏–º URL
	targetURL := s.buildFilterURL(filters)
	log.Printf("üîç Krisha Filter: –ü–∞—Ä—Å–∏–º URL: %s", targetURL)

	// –ü–æ–ª—É—á–∞–µ–º HTML
	doc, err := s.fetchPage(targetURL)
	if err != nil {
		return nil, err
	}

	// –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	properties := s.parseProperties(doc)
	log.Printf("‚úÖ Krisha Filter: –ù–∞–π–¥–µ–Ω–æ %d –æ–±—ä—è–≤–ª–µ–Ω–∏–π", len(properties))

	// –ü–∞—Ä—Å–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
	totalPages, hasNextPage := s.parsePagination(doc)

	// –ü–∞—Ä—Å–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	totalFound := s.parseTotalCount(doc, len(properties), totalPages)

	result := &KrishaResult{
		Properties:  properties,
		Total:       totalFound,
		TotalPages:  totalPages,
		CurrentPage: filters.Page,
		HasNextPage: hasNextPage,
		URL:         targetURL,
		Filters:     filters,
	}

	return result, nil
}

// collectAllPages —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func (s *KrishaFilterService) collectAllPages(filters KrishaFilters, maxResults int) (*KrishaResult, error) {
	allProperties := []models.ParsedProperty{}
	currentPage := 1
	totalPages := 1

	log.Printf("üöÄ Krisha Filter: –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –º–∞–∫—Å–∏–º—É–º %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", maxResults)

	for {
		// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
		pageFilters := filters
		pageFilters.Page = currentPage
		targetURL := s.buildFilterURL(pageFilters)

		log.Printf("üìÑ Krisha Filter: –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É %d: %s", currentPage, targetURL)

		// –ü–æ–ª—É—á–∞–µ–º HTML
		doc, err := s.fetchPage(targetURL)
		if err != nil {
			log.Printf("‚ùå Krisha Filter: –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %d: %v", currentPage, err)
			break
		}

		// –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		pageProperties := s.parseProperties(doc)
		log.Printf("‚úÖ Krisha Filter: –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %d: %d", currentPage, len(pageProperties))

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
		for _, property := range pageProperties {
			if len(allProperties) >= maxResults {
				log.Printf("üéØ Krisha Filter: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ %d –æ–±—ä—è–≤–ª–µ–Ω–∏–π", maxResults)
				goto finished
			}
			allProperties = append(allProperties, property)
		}

		// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
		if currentPage == 1 {
			totalPages, _ = s.parsePagination(doc)
			log.Printf("üìä Krisha Filter: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: %d", totalPages)

			// –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
			if len(pageProperties) == 0 {
				log.Printf("‚ö†Ô∏è Krisha Filter: –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
				break
			}
		}

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		currentPage++

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		time.Sleep(500 * time.Millisecond)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏ –º—ã –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
		if currentPage > totalPages {
			log.Printf("üèÅ Krisha Filter: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (%d)", totalPages)
			break
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
		if currentPage > 50 { // –ú–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–∫ –∑–∞—â–∏—Ç–∞
			log.Printf("üõë Krisha Filter: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50)")
			break
		}

		// –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
		if len(pageProperties) == 0 {
			log.Printf("‚ö†Ô∏è Krisha Filter: –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %d –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º", currentPage-1)
			break
		}
	}

finished:
	log.Printf("üéâ Krisha Filter: –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: %d", len(allProperties))

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
	apartmentsWithImages := 0
	for _, apt := range allProperties {
		if len(apt.Images) > 0 {
			apartmentsWithImages++
		}
	}
	apartmentsWithoutImages := len(allProperties) - apartmentsWithImages

	log.Printf("üì∏ Krisha Filter: –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: %d, –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %d", apartmentsWithImages, apartmentsWithoutImages)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n webhook –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
	if len(allProperties) > 0 {
		go s.sendToN8nWebhook(filters, allProperties)
	}

	result := &KrishaResult{
		Properties:  allProperties,
		Total:       len(allProperties), // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö
		TotalPages:  1,                  // –í —Ä–µ–∂–∏–º–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Å–µ–≥–¥–∞ 1 –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		CurrentPage: 1,                  // –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ–¥–Ω–æ–π "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π" —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		HasNextPage: false,              // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ä–µ–∂–∏–º–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
		URL:         s.buildFilterURL(filters),
		Filters:     filters,
	}

	return result, nil
}

// fetchPage –ø–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
func (s *KrishaFilterService) fetchPage(targetURL string) (*goquery.Document, error) {
	// –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("GET", targetURL, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º krisha –ø—Ä–æ–µ–∫—Ç–µ)
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
	req.Header.Set("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3")
	// req.Header.Set("Accept-Encoding", "gzip, deflate, br") // –£–±–∏—Ä–∞–µ–º gzip - –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("Cache-Control", "no-cache")
	req.Header.Set("Pragma", "no-cache")

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("HTTP error: %d", resp.StatusCode)
	}

	// –ß–∏—Ç–∞–µ–º HTML
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º HTML
	doc, err := goquery.NewDocumentFromReader(strings.NewReader(string(body)))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %w", err)
	}

	return doc, nil
}

// buildFilterURL —Å—Ç—Ä–æ–∏—Ç URL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
func (s *KrishaFilterService) buildFilterURL(filters KrishaFilters) string {
	baseURL := "https://krisha.kz/prodazha/kvartiry"

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω –∫ URL –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
	cityURL := fmt.Sprintf("%s/%s", baseURL, filters.City)
	if filters.District != "" {
		cityURL += "-" + filters.District
	}
	cityURL += "/"

	params := url.Values{}

	// –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if filters.Rooms != "" {
		params.Set("das[live.rooms]", filters.Rooms)
	}

	// –¶–µ–Ω–∞
	if filters.PriceFrom != "" {
		params.Set("das[price][from]", filters.PriceFrom)
	}
	if filters.PriceTo != "" {
		params.Set("das[price][to]", filters.PriceTo)
	}

	// –ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è
	if filters.AreaFrom != "" {
		params.Set("das[live.square][from]", filters.AreaFrom)
	}
	if filters.AreaTo != "" {
		params.Set("das[live.square][to]", filters.AreaTo)
	}

	// –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏
	if filters.KitchenAreaFrom != "" {
		params.Set("das[kitchen.square][from]", filters.KitchenAreaFrom)
	}
	if filters.KitchenAreaTo != "" {
		params.Set("das[kitchen.square][to]", filters.KitchenAreaTo)
	}

	// –≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã
	if filters.FloorFrom != "" {
		params.Set("das[flat.floor][from]", filters.FloorFrom)
	}
	if filters.FloorTo != "" {
		params.Set("das[flat.floor][to]", filters.FloorTo)
	}

	// –≠—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞
	if filters.HouseFloorFrom != "" {
		params.Set("das[house.floor_num][from]", filters.HouseFloorFrom)
	}
	if filters.HouseFloorTo != "" {
		params.Set("das[house.floor_num][to]", filters.HouseFloorTo)
	}

	// –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
	if filters.YearFrom != "" {
		params.Set("das[house.year][from]", filters.YearFrom)
	}
	if filters.YearTo != "" {
		params.Set("das[house.year][to]", filters.YearTo)
	}

	// –¢–∏–ø –¥–æ–º–∞
	if filters.HouseType != "" {
		params.Set("das[house.type]", filters.HouseType)
	}

	// –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Ç –∫–æ–≥–æ)
	if filters.WhoType != "" {
		params.Set("das[who]", filters.WhoType)
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if filters.HasPhoto {
		params.Set("das[_sys.hasphoto]", "1")
	}

	if filters.FloorNotFirst {
		params.Set("das[floor_not_first]", "1")
	}

	if filters.FloorNotLast {
		params.Set("das[floor_not_last]", "1")
	}

	if filters.Complex != "" {
		params.Set("das[map.complex]", filters.Complex)
	}

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
	if filters.Page > 1 {
		params.Set("page", strconv.Itoa(filters.Page))
	}

	finalURL := cityURL
	if len(params) > 0 {
		finalURL = fmt.Sprintf("%s?%s", cityURL, params.Encode())
	}

	log.Printf("üîó Krisha Filter: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: %s", finalURL)
	return finalURL
}

// parseProperties –ø–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
func (s *KrishaFilterService) parseProperties(doc *goquery.Document) []models.ParsedProperty {
	var properties []models.ParsedProperty

	doc.Find(".a-card").Each(func(i int, sel *goquery.Selection) {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏
		if sel.HasClass("ddl_campaign") || sel.Find(".adfox").Length() > 0 {
			return
		}

		property := s.parsePropertyCard(sel)
		if property.Title != "" && property.Price > 0 {
			properties = append(properties, property)
		}
	})

	return properties
}

// parsePropertyCard –ø–∞—Ä—Å–∏—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
func (s *KrishaFilterService) parsePropertyCard(card *goquery.Selection) models.ParsedProperty {
	property := models.ParsedProperty{}

	// ID –∏ UUID
	if id, exists := card.Attr("data-id"); exists {
		property.ID = id
	}

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	titleText := card.Find(".a-card__title").Text()
	property.Title = strings.TrimSpace(titleText)

	// URL
	if href, exists := card.Find(".a-card__title").Attr("href"); exists {
		if strings.HasPrefix(href, "/") {
			property.URL = "https://krisha.kz" + href
		} else {
			property.URL = href
		}
	}

	// –¶–µ–Ω–∞
	priceText := card.Find(".a-card__price").Text()
	property.Price, property.Currency = s.parsePrice(strings.TrimSpace(priceText))

	// –ê–¥—Ä–µ—Å
	addressText := card.Find(".a-card__subtitle").Text()
	property.Address = strings.TrimSpace(addressText)

	// –û–ø–∏—Å–∞–Ω–∏–µ
	descText := card.Find(".a-card__text-preview").Text()
	property.Description = strings.TrimSpace(descText)

	// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	property.Images = s.parseImages(card)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å –∏ —ç—Ç–∞–∂ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	s.parseAreaAndFloor(property.Title, &property)

	// –¢–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
	phoneText := card.Find(".seller-phone").Text()
	if phoneText != "" {
		property.Phone = strings.TrimSpace(phoneText)
	}

	return property
}

// parsePrice –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
func (s *KrishaFilterService) parsePrice(priceText string) (int64, string) {
	if priceText == "" {
		return 0, "KZT"
	}

	// –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
	re := regexp.MustCompile(`[^\d]`)
	priceStr := re.ReplaceAllString(priceText, "")
	
	if price, err := strconv.ParseInt(priceStr, 10, 64); err == nil {
		return price, "KZT"
	}

	return 0, "KZT"
}

// parseImages –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
func (s *KrishaFilterService) parseImages(card *goquery.Selection) []string {
	var images []string

	// –£–±–∏—Ä–∞–µ–º –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ UUID

	// –ò—â–µ–º data-photo-id –≤ picture —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ
	pictureElement := card.Find("picture")
	photoId := "1"
	if pictureElement.Length() > 0 {
		if dataPhotoId, exists := pictureElement.Attr("data-photo-id"); exists && dataPhotoId != "" {
			photoId = dataPhotoId
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ data-uuid
	if uuid, exists := card.Attr("data-uuid"); exists && uuid != "" {
		firstTwoChars := uuid[:2]
		mainDomain := "https://krisha-photos.kcdn.online" // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –¥–æ–º–µ–Ω

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ù–û –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		imageURL := fmt.Sprintf("%s/webp/%s/%s/%s-%s.webp", mainDomain, firstTwoChars, uuid, photoId, "400x300")
		images = append(images, imageURL)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ UUID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
	return images
}

// parseAreaAndFloor –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –∏ —ç—Ç–∞–∂ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
func (s *KrishaFilterService) parseAreaAndFloor(title string, property *models.ParsedProperty) {
	// –ò—â–µ–º –ø–ª–æ—â–∞–¥—å –∏ —ç—Ç–∞–∂ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: "25.5 –º¬≤ 3/9 —ç—Ç–∞–∂"
	areaFloorRe := regexp.MustCompile(`(\d+(?:\.\d+)?)\s*–º¬≤.*?(\d+)\/(\d+)\s*—ç—Ç–∞–∂`)
	if matches := areaFloorRe.FindStringSubmatch(title); len(matches) >= 4 {
		if area, err := strconv.ParseFloat(matches[1], 64); err == nil {
			property.Area = &area
		}
		if floor, err := strconv.Atoi(matches[2]); err == nil {
			property.Floor = &floor
		}
		if totalFloors, err := strconv.Atoi(matches[3]); err == nil {
			property.TotalFloors = &totalFloors
		}
	}

	// –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
	roomsRe := regexp.MustCompile(`(\d+)[\-\s]*–∫–æ–º–Ω`)
	if matches := roomsRe.FindStringSubmatch(title); len(matches) >= 2 {
		if rooms, err := strconv.Atoi(matches[1]); err == nil {
			property.Rooms = &rooms
		}
	}
}

// parsePagination –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func (s *KrishaFilterService) parsePagination(doc *goquery.Document) (totalPages int, hasNextPage bool) {
	totalPages = 1
	hasNextPage = false

	// –ò—â–µ–º –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä
	paginator := doc.Find(".paginator, .pagination, nav.paginator")
	if paginator.Length() == 0 {
		return totalPages, hasNextPage
	}

	// –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
	var pageNumbers []int
	paginator.Find(".paginator__btn, .pagination__btn, .page-btn, a[data-page]").Each(func(i int, btn *goquery.Selection) {
		// –ò–∑ data-page –∞—Ç—Ä–∏–±—É—Ç–∞
		if dataPage, exists := btn.Attr("data-page"); exists {
			if pageNum, err := strconv.Atoi(dataPage); err == nil && pageNum > 0 {
				pageNumbers = append(pageNumbers, pageNum)
			}
		}

		// –ò–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
		pageText := strings.TrimSpace(btn.Text())
		if pageNum, err := strconv.Atoi(pageText); err == nil && pageNum > 0 {
			pageNumbers = append(pageNumbers, pageNum)
		}
	})

	// –ò—â–µ–º –≤ href –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
	paginator.Find("a[href*=\"page=\"]").Each(func(i int, link *goquery.Selection) {
		if href, exists := link.Attr("href"); exists {
			re := regexp.MustCompile(`page=(\d+)`)
			if matches := re.FindStringSubmatch(href); len(matches) >= 2 {
				if pageNum, err := strconv.Atoi(matches[1]); err == nil && pageNum > 0 {
					pageNumbers = append(pageNumbers, pageNum)
				}
			}
		}
	})

	// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	if len(pageNumbers) > 0 {
		for _, num := range pageNumbers {
			if num > totalPages {
				totalPages = num
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ"
	nextBtn := paginator.Find(".paginator__btn--next, .pagination__btn--next, .next, .page-next")
	hasNextPage = nextBtn.Length() > 0

	return totalPages, hasNextPage
}

// parseTotalCount –ø–∞—Ä—Å–∏—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
func (s *KrishaFilterService) parseTotalCount(doc *goquery.Document, foundCount, totalPages int) int {
	// –ò—â–µ–º —Ç–µ–∫—Å—Ç "–ù–∞–π–¥–µ–Ω–æ X –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
	searchSubtitle := doc.Find(".a-search-subtitle, .search-results-nb").Text()
	
	totalRe := regexp.MustCompile(`–ù–∞–π–¥–µ–Ω–æ\s+(\d+(?:\s+\d+)*)\s+–æ–±—ä—è–≤–ª–µ–Ω–∏`)
	if matches := totalRe.FindStringSubmatch(searchSubtitle); len(matches) >= 2 {
		// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —á–∏—Å–ª–∞
		cleanNumber := strings.ReplaceAll(matches[1], " ", "")
		if total, err := strconv.Atoi(cleanNumber); err == nil {
			return total
		}
	}

	// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
	selectors := []string{
		".search-results-header",
		".results-count", 
		".found-count",
		".search-results__count",
		".listing-header",
		"h1",
		".search-summary",
		".page-title",
	}

	totalCount := 0
	for _, selector := range selectors {
		if totalCount > 0 {
			break
		}
		doc.Find(selector).Each(func(i int, sel *goquery.Selection) {
			if totalCount > 0 {
				return // Already found
			}
			text := sel.Text()
			re := regexp.MustCompile(`(\d+(?:\s+\d+)*)\s*(?:–æ–±—ä—è–≤–ª–µ–Ω–∏|—Ä–µ–∑—É–ª—å—Ç–∞—Ç|–Ω–∞–π–¥–µ–Ω)`)
			if matches := re.FindStringSubmatch(text); len(matches) >= 2 {
				cleanNumber := strings.ReplaceAll(matches[1], " ", "")
				if total, err := strconv.Atoi(cleanNumber); err == nil {
					totalCount = total
				}
			}
		})
	}
	
	if totalCount > 0 {
		return totalCount
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	if totalPages > 1 {
		return totalPages * 20 // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 20 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
	}

	return foundCount
}

// GenerateFiltersFromMessage - –ò–ò –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *KrishaFilterService) GenerateFiltersFromMessage(message string) KrishaFilters {
	filters := KrishaFilters{
		City:      "almaty", // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		PriceFrom: "",
		PriceTo:   "",
		Rooms:     "",
		Page:      1,
	}

	message = strings.ToLower(message)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥
	if strings.Contains(message, "–∞—Å—Ç–∞–Ω–∞") || strings.Contains(message, "–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω") {
		filters.City = "astana"
	} else if strings.Contains(message, "—à—ã–º–∫–µ–Ω—Ç") {
		filters.City = "shymkent"
	} else if strings.Contains(message, "–∞–ª–º–∞—Ç—ã") {
		filters.City = "almaty"
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
	priceRe := regexp.MustCompile(`(\d+(?:\s+\d+)*)\s*(?:–º–ª–Ω|–º–∏–ª–ª–∏–æ–Ω|—Ç—ã—Å—è—á|—Ç–µ–Ω–≥–µ|‚Ç∏)`)
	priceMatches := priceRe.FindAllStringSubmatch(message, -1)
	
	var prices []int64
	for _, match := range priceMatches {
		if len(match) >= 2 {
			priceStr := strings.ReplaceAll(match[1], " ", "")
			if price, err := strconv.ParseInt(priceStr, 10, 64); err == nil {
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
				if strings.Contains(match[0], "–º–ª–Ω") || strings.Contains(match[0], "–º–∏–ª–ª–∏–æ–Ω") {
					price *= 1000000
				} else if strings.Contains(match[0], "—Ç—ã—Å—è—á") {
					price *= 1000
				}
				prices = append(prices, price)
			}
		}
	}

	if len(prices) >= 2 {
		filters.PriceFrom = strconv.FormatInt(prices[0], 10)
		filters.PriceTo = strconv.FormatInt(prices[1], 10)
	} else if len(prices) == 1 {
		filters.PriceFrom = strconv.FormatInt(prices[0], 10)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
	roomsRe := regexp.MustCompile(`(\d+)[\-\s]*(?:–∫–æ–º–Ω|–∫–æ–º–Ω–∞—Ç)`)
	if matches := roomsRe.FindStringSubmatch(message); len(matches) >= 2 {
		filters.Rooms = matches[1]
	}

	return filters
}

// FormatResultForChat —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
func (s *KrishaFilterService) FormatResultForChat(result *KrishaResult) string {
	if len(result.Properties) == 0 {
		return "üè† –ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
	}

	var response strings.Builder
	
	response.WriteString(fmt.Sprintf("üè† –ù–∞–π–¥–µ–Ω–æ %d –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", 
		result.Total, result.CurrentPage, result.TotalPages))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
	count := len(result.Properties)
	if count > 5 {
		count = 5
	}

	for i := 0; i < count; i++ {
		prop := result.Properties[i]
		
		response.WriteString(fmt.Sprintf("üè° **%s**\n", prop.Title))
		response.WriteString(fmt.Sprintf("üí∞ %s %s\n", s.formatPrice(prop.Price), prop.Currency))
		
		if prop.Address != "" {
			response.WriteString(fmt.Sprintf("üìç %s\n", prop.Address))
		}
		
		if len(prop.Images) > 0 {
			response.WriteString(fmt.Sprintf("üñºÔ∏è [–§–æ—Ç–æ](%s)\n", prop.Images[0]))
		}
		
		if prop.URL != "" {
			response.WriteString(fmt.Sprintf("üîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Krisha.kz](%s)\n", prop.URL))
		}
		
		response.WriteString("\n")
	}

	if len(result.Properties) > 5 {
		response.WriteString(fmt.Sprintf("... –∏ –µ—â—ë %d –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n", len(result.Properties)-5))
	}

	if result.HasNextPage {
		response.WriteString("‚û°Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: \"—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\"")
	}

	return response.String()
}

// formatPrice —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (s *KrishaFilterService) formatPrice(price int64) string {
	if price == 0 {
		return "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
	str := strconv.FormatInt(price, 10)
	if len(str) <= 3 {
		return str
	}

	var result []string
	for i := len(str); i > 0; i -= 3 {
		start := i - 3
		if start < 0 {
			start = 0
		}
		result = append([]string{str[start:i]}, result...)
	}

	return strings.Join(result, " ")
}

// sendToN8nWebhook –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ n8n webhook
func (s *KrishaFilterService) sendToN8nWebhook(filters KrishaFilters, properties []models.ParsedProperty) {
	log.Printf("üì° Krisha Filter: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n webhook: %d –æ–±—ä—è–≤–ª–µ–Ω–∏–π", len(properties))

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π n8n
	filtersMap := s.convertKrishaFiltersToMap(filters)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è webhook
	payload := N8nWebhookPayloadKrisha{
		FiltersUsed: filtersMap,
		Properties:  properties,
		TotalFound:  len(properties),
	}

	// –ú–∞—Ä—à–∞–ª–∏–º –≤ JSON
	payloadJSON, err := json.Marshal(payload)
	if err != nil {
		log.Printf("‚ùå Krisha Filter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON –¥–ª—è n8n webhook: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", N8N_WEBHOOK_URL_KRISHA, bytes.NewBuffer(payloadJSON))
	if err != nil {
		log.Printf("‚ùå Krisha Filter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è n8n: %v", err)
		return
	}

	req.Header.Set("Content-Type", "application/json")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := s.client.Do(req)
	if err != nil {
		log.Printf("‚ùå Krisha Filter: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ n8n: %v", err)
		return
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	responseBody, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("‚ùå Krisha Filter: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n: %v", err)
		return
	}

	if resp.StatusCode == http.StatusOK {
		log.Printf("‚úÖ Krisha Filter: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ n8n webhook")
		log.Printf("üìÑ Krisha Filter: –û—Ç–≤–µ—Ç –æ—Ç n8n: %s", string(responseBody))
	} else {
		log.Printf("‚ùå Krisha Filter: n8n webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É %d: %s", resp.StatusCode, string(responseBody))
	}
}

// convertKrishaFiltersToMap –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç KrishaFilters –≤ map –¥–ª—è n8n
func (s *KrishaFilterService) convertKrishaFiltersToMap(filters KrishaFilters) map[string]interface{} {
	filtersMap := make(map[string]interface{})

	if filters.City != "" {
		filtersMap["city"] = filters.City
	}
	if filters.District != "" {
		filtersMap["district"] = filters.District
	}
	if filters.PriceFrom != "" {
		filtersMap["price_min"] = filters.PriceFrom
	}
	if filters.PriceTo != "" {
		filtersMap["price_max"] = filters.PriceTo
	}
	if filters.Rooms != "" {
		filtersMap["rooms"] = filters.Rooms
	}
	if filters.AreaFrom != "" {
		filtersMap["total_area_from"] = filters.AreaFrom
	}
	if filters.AreaTo != "" {
		filtersMap["total_area_to"] = filters.AreaTo
	}
	if filters.KitchenAreaFrom != "" {
		filtersMap["kitchen_area_from"] = filters.KitchenAreaFrom
	}
	if filters.KitchenAreaTo != "" {
		filtersMap["kitchen_area_to"] = filters.KitchenAreaTo
	}
	if filters.FloorFrom != "" {
		filtersMap["floor_from"] = filters.FloorFrom
	}
	if filters.FloorTo != "" {
		filtersMap["floor_to"] = filters.FloorTo
	}
	if filters.FloorNotFirst {
		filtersMap["not_first_floor"] = true
	}
	if filters.FloorNotLast {
		filtersMap["not_last_floor"] = true
	}
	if filters.HouseFloorFrom != "" {
		filtersMap["total_floors_from"] = filters.HouseFloorFrom
	}
	if filters.HouseFloorTo != "" {
		filtersMap["total_floors_to"] = filters.HouseFloorTo
	}
	if filters.YearFrom != "" {
		filtersMap["build_year_from"] = filters.YearFrom
	}
	if filters.YearTo != "" {
		filtersMap["build_year_to"] = filters.YearTo
	}
	if filters.CollectAllPages {
		filtersMap["collect_all_pages"] = true
	}
	if filters.MaxResults > 0 {
		filtersMap["max_results"] = filters.MaxResults
	}

	return filtersMap
}