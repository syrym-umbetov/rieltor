// internal/services/ai_service.go
package services

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"github.com/sashabaranov/go-openai"
	"smartestate/internal/config"
	"smartestate/internal/models"
	"strings"
)

type AIService struct {
	client             *openai.Client
	config             *config.Config
	parserService      *ParserService
	chatService        *ChatService
	krishaFilterService *KrishaFilterService
}

func NewAIService(cfg *config.Config) *AIService {
	client := openai.NewClient(cfg.AI.OpenAIKey)
	return &AIService{
		client: client,
		config: cfg,
	}
}

func (s *AIService) isAPIKeyConfigured() bool {
	switch s.config.AI.Provider {
	case "openai":
		return s.config.AI.OpenAIKey != ""
	case "gemini":
		return s.config.AI.GeminiKey != ""
	case "claude":
		return s.config.AI.AnthropicKey != ""
	default:
		return false
	}
}

// SetParserService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å–µ—Ä–≤–∏—Å –¥–ª—è AI
func (s *AIService) SetParserService(parserService *ParserService) {
	s.parserService = parserService
}

// SetChatService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è AI
func (s *AIService) SetChatService(chatService *ChatService) {
	s.chatService = chatService
}

// SetKrishaFilterService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Krisha filter —Å–µ—Ä–≤–∏—Å –¥–ª—è AI
func (s *AIService) SetKrishaFilterService(krishaFilterService *KrishaFilterService) {
	s.krishaFilterService = krishaFilterService
}

type AIResponse struct {
	Content  string                 `json:"content"`
	Metadata models.MessageMetadata `json:"metadata"`
}

// Gemini API structures
type GeminiRequest struct {
	Contents []GeminiContent `json:"contents"`
}

type GeminiContent struct {
	Parts []GeminiPart `json:"parts"`
}

type GeminiPart struct {
	Text string `json:"text"`
}

type GeminiResponse struct {
	Candidates []GeminiCandidate `json:"candidates"`
}

type GeminiCandidate struct {
	Content GeminiContent `json:"content"`
}

func (s *AIService) callGeminiAPI(prompt string) (string, error) {
	url := fmt.Sprintf("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=%s", s.config.AI.GeminiKey)
	
	reqData := GeminiRequest{
		Contents: []GeminiContent{
			{
				Parts: []GeminiPart{
					{Text: prompt},
				},
			},
		},
	}
	
	jsonData, err := json.Marshal(reqData)
	if err != nil {
		return "", err
	}
	
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	
	if resp.StatusCode != 200 {
		return "", fmt.Errorf("Gemini API error: %s", string(body))
	}
	
	var geminiResp GeminiResponse
	if err := json.Unmarshal(body, &geminiResp); err != nil {
		return "", err
	}
	
	if len(geminiResp.Candidates) > 0 && len(geminiResp.Candidates[0].Content.Parts) > 0 {
		return geminiResp.Candidates[0].Content.Parts[0].Text, nil
	}
	
	return "", fmt.Errorf("no response from Gemini")
}

func (s *AIService) processWithGemini(sessionID, content, systemPrompt string) (*AIResponse, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	confirmationWords := []string{"–¥–∞", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–∑–∞–ø—É—Å–∫–∞–π", "–¥–∞–≤–∞–π", "–æ–∫–µ–π", "–æ–∫", "—Å—Ç–∞—Ä—Ç"}
	userContentLower := strings.ToLower(content)
	
	hasConfirmation := false
	for _, word := range confirmationWords {
		if strings.Contains(userContentLower, word) {
			hasConfirmation = true
			break
		}
	}
	
	if hasConfirmation {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
		if s.chatService != nil {
			session, err := s.chatService.GetSession(sessionID)
			if err == nil && session != nil && len(session.Messages) > 0 {
				// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
				for i := len(session.Messages) - 1; i >= 0; i-- {
					msg := session.Messages[i]
					if msg.Role == "user" {
						filters := s.extractSearchParams(msg.Content)
						if filters.City != "" {
							// –ù–∞—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ - –≤—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
							return s.handleParsePropertiesWithParams(sessionID, filters, content)
						}
					}
				}
			}
		}
	}
	
	// –û–±—ã—á–Ω—ã–π —á–∞—Ç —Å Gemini
	fullPrompt := systemPrompt + "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + content
	aiResponse, err := s.callGeminiAPI(fullPrompt)
	if err != nil {
		return nil, err
	}
	
	metadata := s.extractMetadata(content, aiResponse)
	return &AIResponse{
		Content:  aiResponse,
		Metadata: metadata,
	}, nil
}

func (s *AIService) extractSearchParams(content string) models.PropertyFilters {
	var filters models.PropertyFilters
	contentLower := strings.ToLower(content)
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥
	cities := []string{"–∞–ª–º–∞—Ç—ã", "–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω", "–∞—Å—Ç–∞–Ω–∞", "—à—ã–º–∫–µ–Ω—Ç"}
	for _, city := range cities {
		if strings.Contains(contentLower, city) {
			if city == "–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω" || city == "–∞—Å—Ç–∞–Ω–∞" {
				filters.City = "–ù—É—Ä-Sultan"
			} else if city == "–∞–ª–º–∞—Ç—ã" {
				filters.City = "–ê–ª–º–∞—Ç—ã"
			} else if city == "—à—ã–º–∫–µ–Ω—Ç" {
				filters.City = "–®—ã–º–∫–µ–Ω—Ç"
			}
			break
		}
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
	if strings.Contains(contentLower, "1-–∫–æ–º–Ω") || strings.Contains(contentLower, "1 –∫–æ–º–Ω") || strings.Contains(contentLower, "–æ–¥–Ω–æ–∫–æ–º–Ω") {
		rooms := 1
		filters.Rooms = &rooms
	} else if strings.Contains(contentLower, "2-–∫–æ–º–Ω") || strings.Contains(contentLower, "2 –∫–æ–º–Ω") || strings.Contains(contentLower, "–¥–≤—É—Ö–∫–æ–º–Ω") {
		rooms := 2
		filters.Rooms = &rooms
	} else if strings.Contains(contentLower, "3-–∫–æ–º–Ω") || strings.Contains(contentLower, "3 –∫–æ–º–Ω") || strings.Contains(contentLower, "—Ç—Ä–µ—Ö–∫–æ–º–Ω") {
		rooms := 3
		filters.Rooms = &rooms
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –±—é–¥–∂–µ—Ç
	if strings.Contains(contentLower, "40 –º–ª–Ω") || strings.Contains(contentLower, "40–º–ª–Ω") {
		price := int64(40000000)
		filters.PriceMax = &price
	} else if strings.Contains(contentLower, "30 –º–ª–Ω") || strings.Contains(contentLower, "30–º–ª–Ω") {
		price := int64(30000000)
		filters.PriceMax = &price
	} else if strings.Contains(contentLower, "50 –º–ª–Ω") || strings.Contains(contentLower, "50–º–ª–Ω") {
		price := int64(50000000)
		filters.PriceMax = &price
	}
	
	filters.PropertyType = "apartment"
	return filters
}

func (s *AIService) handleParsePropertiesWithParams(sessionID string, filters models.PropertyFilters, userContent string) (*AIResponse, error) {
	if s.krishaFilterService == nil {
		return &AIResponse{
			Content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			Metadata: models.MessageMetadata{
				Actions:    []string{"parser_unavailable"},
				Confidence: 0.9,
				Extra:      map[string]interface{}{"error": "krisha_filter_service_not_initialized"},
			},
		}, nil
	}

	// Convert to KrishaFilters format
	krishaFilters := s.convertToKrishaFilters(filters)
	
	// Call KrishaFilterService
	krishaResult, err := s.krishaFilterService.ParseWithFilters(krishaFilters)
	if err != nil {
		return &AIResponse{
			Content: fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: %v. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.", err),
			Metadata: models.MessageMetadata{
				Actions:    []string{"parse_failed"},
				Confidence: 0.7,
				Extra:      map[string]interface{}{"error": err.Error()},
			},
		}, nil
	}

	// Format response based on parsing results
	if len(krishaResult.Properties) == 0 {
		content := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥."
		return &AIResponse{
			Content: content,
			Metadata: models.MessageMetadata{
				Actions:    []string{"search_no_results"},
				Confidence: 0.9,
				Extra: map[string]interface{}{
					"filters_used": krishaFilters,
					"total_found":  0,
				},
			},
		}, nil
	}

	// Create response with found properties using Krisha format
	log.Printf("üîÑ AI Service: –ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %d –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", len(krishaResult.Properties))

	content := s.formatKrishaPropertiesResponse(krishaResult.Properties, krishaFilters)

	log.Printf("‚úÖ AI Service: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", len(krishaResult.Properties))

	return &AIResponse{
		Content: content,
		Metadata: models.MessageMetadata{
			Actions: []string{"search_completed", "properties_found"},
			PropertyIDs: extractKrishaPropertyIDs(krishaResult.Properties),
			Confidence: 0.95,
			Extra: map[string]interface{}{
				"filters_used": krishaFilters,
				"total_found":  len(krishaResult.Properties),
				"properties":   krishaResult.Properties,
			},
		},
	}, nil
}

func (s *AIService) ProcessChatMessage(sessionID, content string) (*AIResponse, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
	if !s.isAPIKeyConfigured() {
		return &AIResponse{
			Content: fmt.Sprintf("‚ùå AI API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ '%s' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –≤ —Ñ–∞–π–ª .env", s.config.AI.Provider),
			Metadata: models.MessageMetadata{
				Actions:    []string{"configuration_error"},
				Confidence: 1.0,
				Extra:      map[string]interface{}{"error": "ai_api_key_missing", "provider": s.config.AI.Provider},
			},
		}, nil
	}
	systemPrompt := `You are SmartEstate AI assistant, helping users find and manage real estate in Kazakhstan. 

	CRITICAL RULE - NEVER call parse_properties function without EXPLICIT final confirmation!

	SMART CONVERSATION FLOW:
	1. When user provides search request with COMPLETE information (city, rooms, budget), IMMEDIATELY summarize and ask for confirmation
	2. When user provides INCOMPLETE information, ask only for missing critical details
	3. ALWAYS summarize parameters and ask FINAL CONFIRMATION: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∏—Å–∫?" 
	4. ONLY use parse_properties function when user explicitly confirms with "–¥–∞", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–¥–∞–≤–∞–π", "–æ–∫–µ–π" etc.

	CRITICAL: If user provides city + rooms + budget in first message - DON'T ask additional questions, go straight to confirmation!

	You can help with:
	- Finding properties (only after confirmation)
	- Calculating mortgage payments
	- Property valuation
	- Scheduling viewings
	- Market analysis
	
	Always respond in Russian or Kazakh based on user's language.
	
	Example conversation flow:
	User: "–ù–∞–π–¥–∏ 2-–∫–æ–º–Ω –≤ –ê–ª–º–∞—Ç—ã –¥–æ 40 –º–ª–Ω"
	AI: "–ü–æ–Ω—è–ª –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
	‚úÖ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
	‚úÖ –ì–æ—Ä–æ–¥: –ê–ª–º–∞—Ç—ã  
	‚úÖ –ë—é–¥–∂–µ—Ç: –¥–æ 40 –º–ª–Ω —Ç–µ–Ω–≥–µ
	
	–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∏—Å–∫? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –∏ —è –Ω–∞—á–Ω—É –ø–∞—Ä—Å–∏–Ω–≥."
	
	User: "–î–∞"
	AI: (NOW calls parse_properties function)
	
	NEVER call parse_properties without final user confirmation!`

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	functions := []openai.FunctionDefinition{
		{
			Name:        "parse_properties",
			Description: "–ü–∞—Ä—Å–∏—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å —Å–∞–π—Ç–∞ krisha.kz –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –Ø–í–ù–û–ì–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø–∞ '–¥–∞, –∏—â–∏', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'. –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–∑—ã–≤–∞–π –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!",
			Parameters: map[string]interface{}{
				"type": "object",
				"properties": map[string]interface{}{
					"city": map[string]interface{}{
						"type":        "string",
						"description": "–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ (–ê–ª–º–∞—Ç—ã, –ù—É—Ä-–°—É–ª—Ç–∞–Ω, –®—ã–º–∫–µ–Ω—Ç)",
						"enum":        []string{"–ê–ª–º–∞—Ç—ã", "–ù—É—Ä-Sultan", "–®—ã–º–∫–µ–Ω—Ç"},
					},
					"property_type": map[string]interface{}{
						"type":        "string", 
						"description": "–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
						"enum":        []string{"apartment", "house", "commercial"},
					},
					"rooms": map[string]interface{}{
						"type":        "integer",
						"description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
						"minimum":     1,
						"maximum":     10,
					},
					"price_min": map[string]interface{}{
						"type":        "integer",
						"description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ç–µ–Ω–≥–µ",
					},
					"price_max": map[string]interface{}{
						"type":        "integer", 
						"description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ç–µ–Ω–≥–µ",
					},
					"total_area_from": map[string]interface{}{
						"type":        "integer",
						"description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –≤ –º¬≤",
					},
					"total_area_to": map[string]interface{}{
						"type":        "integer",
						"description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –≤ –º¬≤",
					},
					"has_photos": map[string]interface{}{
						"type":        "boolean",
						"description": "–¢–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏",
					},
					"is_new_building": map[string]interface{}{
						"type":        "boolean", 
						"description": "–¢–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏",
					},
					"seller_type": map[string]interface{}{
						"type":        "string",
						"description": "–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞",
						"enum":        []string{"owner", "agent", "developer"},
					},
				},
				"required": []string{"city"},
			},
		},
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	var messages []openai.ChatCompletionMessage
	messages = append(messages, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleSystem,
		Content: systemPrompt,
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ ChatService –¥–æ—Å—Ç—É–ø–µ–Ω
	if s.chatService != nil {
		session, err := s.chatService.GetSession(sessionID)
		if err == nil && session != nil {
			// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ - –µ–≥–æ –¥–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ)
			for _, msg := range session.Messages {
				var role string
				switch msg.Role {
				case "user":
					role = openai.ChatMessageRoleUser
				case "assistant":
					role = openai.ChatMessageRoleAssistant
				default:
					continue
				}
				messages = append(messages, openai.ChatCompletionMessage{
					Role:    role,
					Content: msg.Content,
				})
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	messages = append(messages, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleUser,
		Content: content,
	})

	// –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ AI
	var aiResponse string
	var err error
	
	switch s.config.AI.Provider {
	case "gemini":
		// –î–ª—è Gemini –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π
		return s.processWithGemini(sessionID, content, systemPrompt)
	case "openai":
	default:
		// OpenAI –∫–∞–∫ fallback
		resp, openaiErr := s.client.CreateChatCompletion(
			context.Background(),
			openai.ChatCompletionRequest{
				Model:        openai.GPT4,
				Messages:     messages,
				Functions:    functions,
				FunctionCall: "auto",
			},
		)
		
		if openaiErr != nil {
			err = openaiErr
		} else {
			message := resp.Choices[0].Message
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç –ª–∏ –ò–ò —Ñ—É–Ω–∫—Ü–∏—é
			if message.FunctionCall != nil {
				return s.handleFunctionCall(sessionID, message, content)
			}
			
			aiResponse = message.Content
		}
	}
	
	if err != nil {
		return nil, err
	}

	metadata := s.extractMetadata(content, aiResponse)

	return &AIResponse{
		Content:  aiResponse,
		Metadata: metadata,
	}, nil
}

func (s *AIService) GenerateAdCreatives(propertyID string, platforms []string) ([]models.Creative, error) {
	// Implementation for generating ad creatives
	return []models.Creative{}, nil
}

func (s *AIService) GetPropertyRecommendations(userID string) ([]models.Property, error) {
	return []models.Property{}, nil
}

func (s *AIService) GeneratePropertyDescription(property *models.Property) (string, error) {
	prompt := fmt.Sprintf(`Generate an attractive property listing description in Russian:
	Type: %s
	Rooms: %d
	Area: %.2f sqm
	Floor: %d/%d
	Location: %s, %s`,
		property.PropertyType,
		property.Rooms,
		property.AreaSqm,
		property.Floor,
		property.TotalFloors,
		property.Address.City,
		property.Address.Street,
	)

	resp, err := s.client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT4,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleUser,
					Content: prompt,
				},
			},
		},
	)

	if err != nil {
		return "", err
	}

	return resp.Choices[0].Message.Content, nil
}

func (s *AIService) extractMetadata(userContent, aiResponse string) models.MessageMetadata {
	metadata := models.MessageMetadata{
		Actions:     []string{},
		PropertyIDs: []string{},
		Extra:       make(map[string]interface{}),
	}

	if containsAny(aiResponse, []string{"–ø–æ–∫–∞–∑–∞—Ç—å", "–Ω–∞–π—Ç–∏", "–ø–æ–¥–æ–±—Ä–∞—Ç—å"}) {
		metadata.Actions = append(metadata.Actions, "search")
	}
	if containsAny(aiResponse, []string{"—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å", "–∏–ø–æ—Ç–µ–∫–∞", "–∫—Ä–µ–¥–∏—Ç"}) {
		metadata.Actions = append(metadata.Actions, "mortgage_calculation")
	}
	if containsAny(aiResponse, []string{"–∑–∞–ø–∏—Å–∞—Ç—å", "–ø—Ä–æ—Å–º–æ—Ç—Ä", "–≤—Å—Ç—Ä–µ—á–∞"}) {
		metadata.Actions = append(metadata.Actions, "schedule_viewing")
	}

	metadata.Confidence = 0.85
	return metadata
}

func (s *AIService) handleFunctionCall(sessionID string, message openai.ChatCompletionMessage, userContent string) (*AIResponse, error) {
	if message.FunctionCall == nil {
		return nil, fmt.Errorf("no function call found")
	}

	switch message.FunctionCall.Name {
	case "parse_properties":
		return s.handleParsePropertiesCall(sessionID, message.FunctionCall.Arguments, userContent)
	default:
		return nil, fmt.Errorf("unknown function: %s", message.FunctionCall.Name)
	}
}

func (s *AIService) handleParsePropertiesCall(sessionID, arguments, userContent string) (*AIResponse, error) {
	// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	// –¢–æ–ª—å–∫–æ –Ø–í–ù–´–ï —Å–ª–æ–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è, –ë–ï–ó —Å–ª–æ–≤ –∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–Ω–∞–π–¥–∏", "–∏—â–∏", "–ø–æ–∏—Å–∫"
	confirmationWords := []string{"–¥–∞", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–∑–∞–ø—É—Å–∫–∞–π", "–¥–∞–≤–∞–π", "–æ–∫–µ–π", "–æ–∫", "—Å—Ç–∞—Ä—Ç"}
	userContentLower := strings.ToLower(userContent)
	
	hasConfirmation := false
	foundWord := ""
	for _, word := range confirmationWords {
		if strings.Contains(userContentLower, word) {
			hasConfirmation = true
			foundWord = word
			break
		}
	}
	
	// Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	fmt.Printf("[AI SERVICE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '%s'\n", userContent)
	fmt.Printf("[AI SERVICE] –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '%s', hasConfirmation: %v\n", foundWord, hasConfirmation)
	
	if !hasConfirmation {
		return &AIResponse{
			Content: `–Ø –ø–æ–Ω—è–ª –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∏—Å–∫—É, –Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ –≤–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞, –Ω–∞–ø–∏—Å–∞–≤:
- "–î–∞, –∏—â–∏"  
- "–°–æ–≥–ª–∞—Å–µ–Ω"
- "–ó–∞–ø—É—Å–∫–∞–π –ø–æ–∏—Å–∫"

–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏?`,
			Metadata: models.MessageMetadata{
				Actions:    []string{"waiting_confirmation"},
				Confidence: 1.0,
				Extra:      map[string]interface{}{"requires_confirmation": true},
			},
		}, nil
	}

	if s.parserService == nil {
		return &AIResponse{
			Content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			Metadata: models.MessageMetadata{
				Actions:    []string{"parser_unavailable"},
				Confidence: 0.9,
				Extra:      map[string]interface{}{"error": "parser_service_not_initialized"},
			},
		}, nil
	}

	// Parse function arguments
	var filters models.PropertyFilters
	if err := json.Unmarshal([]byte(arguments), &filters); err != nil {
		return &AIResponse{
			Content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.",
			Metadata: models.MessageMetadata{
				Actions:    []string{"parse_error"},
				Confidence: 0.8,
				Extra:      map[string]interface{}{"error": err.Error()},
			},
		}, nil
	}

	// Call parser service
	parseResponse, err := s.parserService.ParseProperties(filters, 1, nil) // –º–∞–∫—Å–∏–º—É–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
	if err != nil {
		return &AIResponse{
			Content: fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: %v. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.", err),
			Metadata: models.MessageMetadata{
				Actions:    []string{"parse_failed"},
				Confidence: 0.7,
				Extra:      map[string]interface{}{"error": err.Error()},
			},
		}, nil
	}

	// Format response based on parsing results
	if len(parseResponse.Properties) == 0 {
		content := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥."
		return &AIResponse{
			Content: content,
			Metadata: models.MessageMetadata{
				Actions:    []string{"search_no_results"},
				Confidence: 0.9,
				Extra: map[string]interface{}{
					"parse_request_id": parseResponse.RequestID,
					"filters_used":     filters,
					"total_found":      0,
				},
			},
		}, nil
	}

	// Create response with found properties
	content := s.formatPropertiesResponse(parseResponse.Properties, filters)
	
	return &AIResponse{
		Content: content,
		Metadata: models.MessageMetadata{
			Actions: []string{"search_completed", "properties_found"},
			PropertyIDs: extractPropertyIDs(parseResponse.Properties),
			Confidence: 0.95,
			Extra: map[string]interface{}{
				"parse_request_id": parseResponse.RequestID,
				"filters_used":     filters,
				"total_found":      len(parseResponse.Properties),
				"properties":       parseResponse.Properties,
			},
		},
	}, nil
}

func (s *AIService) formatPropertiesResponse(properties []models.ParsedProperty, filters models.PropertyFilters) string {
	if len(properties) == 0 {
		return "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
	}

	var response strings.Builder
	response.WriteString(fmt.Sprintf("üè† –ù–∞–π–¥–µ–Ω–æ %d –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", len(properties)))
	
	if filters.City != "" {
		response.WriteString(fmt.Sprintf(" –≤ –≥–æ—Ä–æ–¥–µ %s", filters.City))
	}
	if filters.Rooms != nil {
		response.WriteString(fmt.Sprintf(", %d-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ", *filters.Rooms))
	}
	response.WriteString(":\n\n")

	for i, property := range properties {
		if i >= 100 { // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100 –æ–±—ä–µ–∫—Ç–æ–≤
			response.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d –æ–±—ä–µ–∫—Ç–æ–≤\n", len(properties)-i))
			break
		}

		response.WriteString(fmt.Sprintf("üè¢ **%s**\n", property.Title))
		
		if property.Price > 0 {
			response.WriteString(fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %s ‚Ç∏\n", formatPrice(property.Price)))
		}
		
		if property.Rooms != nil && *property.Rooms > 0 {
			response.WriteString(fmt.Sprintf("üö™ –ö–æ–º–Ω–∞—Ç: %d\n", *property.Rooms))
		}
		
		if property.Area != nil && *property.Area > 0 {
			response.WriteString(fmt.Sprintf("üìê –ü–ª–æ—â–∞–¥—å: %.1f –º¬≤\n", *property.Area))
		}
		
		if property.Address != "" {
			response.WriteString(fmt.Sprintf("üìç –ê–¥—Ä–µ—Å: %s\n", property.Address))
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		if len(property.Images) > 0 {
			response.WriteString("üì∏ –§–æ—Ç–æ:\n")
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
			maxImages := len(property.Images)
			if maxImages > 3 {
				maxImages = 3
			}
			for j := 0; j < maxImages; j++ {
				response.WriteString(fmt.Sprintf("![–§–æ—Ç–æ %d](%s)\n", j+1, property.Images[j]))
			}
			if len(property.Images) > 3 {
				response.WriteString(fmt.Sprintf("*... –∏ –µ—â–µ %d —Ñ–æ—Ç–æ*\n", len(property.Images)-3))
			}
		}
		
		if property.URL != "" {
			// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è krisha.kz
			fullURL := property.URL
			if strings.HasPrefix(property.URL, "/") {
				fullURL = "https://krisha.kz" + property.URL
			}
			response.WriteString(fmt.Sprintf("üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](%s)\n", fullURL))
		}
		
		response.WriteString("\n---\n\n")
	}

	response.WriteString("–•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∫–æ–º-—Ç–æ –æ–±—ä–µ–∫—Ç–µ?")
	return response.String()
}

func formatPrice(price int64) string {
	if price >= 1000000 {
		millions := float64(price) / 1000000
		if millions == float64(int64(millions)) {
			return fmt.Sprintf("%.0f –º–ª–Ω", millions)
		}
		return fmt.Sprintf("%.1f –º–ª–Ω", millions)
	}
	if price >= 1000 {
		thousands := float64(price) / 1000
		if thousands == float64(int64(thousands)) {
			return fmt.Sprintf("%.0f —Ç—ã—Å", thousands)
		}
		return fmt.Sprintf("%.1f —Ç—ã—Å", thousands)
	}
	return fmt.Sprintf("%d", price)
}

func extractPropertyIDs(properties []models.ParsedProperty) []string {
	ids := make([]string, 0, len(properties))
	for _, property := range properties {
		if property.ID != "" {
			ids = append(ids, property.ID)
		}
	}
	return ids
}

func containsAny(text string, keywords []string) bool {
	text = strings.ToLower(text)
	for _, keyword := range keywords {
		if strings.Contains(text, keyword) {
			return true
		}
	}
	return false
}

// ProgressInfo –¥–ª—è WebSocket updates (exported)
type ProgressInfo struct {
	Step        string `json:"step"`
	Current     int    `json:"current"`
	Total       int    `json:"total"`
	Percentage  int    `json:"percentage"`
	Description string `json:"description"`
}

// ProcessChatMessageWithProgress processes chat message with real-time progress updates
func (s *AIService) ProcessChatMessageWithProgress(sessionID, content string, progressChan chan<- ProgressInfo) (*AIResponse, error) {
	// Send initial progress
	progressChan <- ProgressInfo{
		Step:        "ai_analysis",
		Current:     1,
		Total:       4,
		Percentage:  25,
		Description: "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
	}

	// Check API key first
	if !s.isAPIKeyConfigured() {
		return &AIResponse{
			Content: fmt.Sprintf("‚ùå AI API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ '%s' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –≤ —Ñ–∞–π–ª .env", s.config.AI.Provider),
			Metadata: models.MessageMetadata{
				Actions:    []string{"configuration_error"},
				Confidence: 1.0,
				Extra:      map[string]interface{}{"error": "ai_api_key_missing", "provider": s.config.AI.Provider},
			},
		}, nil
	}

	// Check if this is a confirmation for parsing
	confirmationWords := []string{"–¥–∞", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–∑–∞–ø—É—Å–∫–∞–π", "–¥–∞–≤–∞–π", "–æ–∫–µ–π", "–æ–∫", "—Å—Ç–∞—Ä—Ç"}
	userContentLower := strings.ToLower(content)
	
	hasConfirmation := false
	for _, word := range confirmationWords {
		if strings.Contains(userContentLower, word) {
			hasConfirmation = true
			break
		}
	}

	if hasConfirmation {
		progressChan <- ProgressInfo{
			Step:        "params_extraction",
			Current:     2,
			Total:       4,
			Percentage:  50,
			Description: "üîç –ò–∑–≤–ª–µ–∫–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞...",
		}

		// Extract parameters from chat history
		if s.chatService != nil {
			session, err := s.chatService.GetSession(sessionID)
			if err == nil && session != nil && len(session.Messages) > 0 {
				// Search for parameters in history
				for i := len(session.Messages) - 1; i >= 0; i-- {
					msg := session.Messages[i]
					if msg.Role == "user" {
						filters := s.extractSearchParams(msg.Content)
						if filters.City != "" {
							// Found parameters - start parsing with progress
							return s.handleParsePropertiesWithProgress(sessionID, filters, content, progressChan)
						}
					}
				}
			}
		}
	}

	// Regular Gemini chat
	progressChan <- ProgressInfo{
		Step:        "ai_response",
		Current:     3,
		Total:       4,
		Percentage:  75,
		Description: "üí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
	}

	systemPrompt := `You are SmartEstate AI assistant, helping users find and manage real estate in Kazakhstan. 
	CRITICAL RULE - NEVER call parse_properties function without EXPLICIT final confirmation!
	SMART CONVERSATION FLOW:
	1. When user provides search request with COMPLETE information (city, rooms, budget), IMMEDIATELY summarize and ask for confirmation
	2. When user provides INCOMPLETE information, ask only for missing critical details
	3. ALWAYS summarize parameters and ask FINAL CONFIRMATION: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∏—Å–∫?" 
	4. ONLY use parse_properties function when user explicitly confirms with "–¥–∞", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–¥–∞–≤–∞–π", "–æ–∫–µ–π" etc.
	CRITICAL: If user provides city + rooms + budget in first message - DON'T ask additional questions, go straight to confirmation!
	You can help with:
	- Finding properties (only after confirmation)
	- Calculating mortgage payments
	- Property valuation
	- Scheduling viewings
	- Market analysis
	
	Always respond in Russian or Kazakh based on user's language.
	
	Example conversation flow:
	User: "–ù–∞–π–¥–∏ 2-–∫–æ–º–Ω –≤ –ê–ª–º–∞—Ç—ã –¥–æ 40 –º–ª–Ω"
	AI: "–ü–æ–Ω—è–ª –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
	‚úÖ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
	‚úÖ –ì–æ—Ä–æ–¥: –ê–ª–º–∞—Ç—ã  
	‚úÖ –ë—é–¥–∂–µ—Ç: –¥–æ 40 –º–ª–Ω —Ç–µ–Ω–≥–µ
	
	–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∏—Å–∫? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –∏ —è –Ω–∞—á–Ω—É –ø–∞—Ä—Å–∏–Ω–≥."
	
	User: "–î–∞"
	AI: (NOW calls parse_properties function)
	
	NEVER call parse_properties without final user confirmation!`

	fullPrompt := systemPrompt + "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + content
	aiResponse, err := s.callGeminiAPI(fullPrompt)
	if err != nil {
		return nil, err
	}

	progressChan <- ProgressInfo{
		Step:        "completed",
		Current:     4,
		Total:       4,
		Percentage:  100,
		Description: "‚úÖ –ì–æ—Ç–æ–≤–æ!",
	}

	metadata := s.extractMetadata(content, aiResponse)
	return &AIResponse{
		Content:  aiResponse,
		Metadata: metadata,
	}, nil
}

// handleParsePropertiesWithProgress handles property parsing with progress updates
func (s *AIService) handleParsePropertiesWithProgress(sessionID string, filters models.PropertyFilters, userContent string, progressChan chan<- ProgressInfo) (*AIResponse, error) {
	if s.parserService == nil {
		return &AIResponse{
			Content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			Metadata: models.MessageMetadata{
				Actions:    []string{"parser_unavailable"},
				Confidence: 0.9,
				Extra:      map[string]interface{}{"error": "parser_service_not_initialized"},
			},
		}, nil
	}

	progressChan <- ProgressInfo{
		Step:        "parsing_start",
		Current:     3,
		Total:       4,
		Percentage:  75,
		Description: "üè† –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã...",
	}

	// Call parser service (this takes the most time)
	parseResponse, err := s.parserService.ParseProperties(filters, 1, nil) // –º–∞–∫—Å–∏–º—É–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
	if err != nil {
		return &AIResponse{
			Content: fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: %v. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.", err),
			Metadata: models.MessageMetadata{
				Actions:    []string{"parse_failed"},
				Confidence: 0.7,
				Extra:      map[string]interface{}{"error": err.Error()},
			},
		}, nil
	}

	progressChan <- ProgressInfo{
		Step:        "formatting_results",
		Current:     4,
		Total:       4,
		Percentage:  100,
		Description: "üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
	}

	// Format response based on parsing results
	if len(parseResponse.Properties) == 0 {
		content := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥."
		return &AIResponse{
			Content: content,
			Metadata: models.MessageMetadata{
				Actions:    []string{"search_no_results"},
				Confidence: 0.9,
				Extra: map[string]interface{}{
					"parse_request_id": parseResponse.RequestID,
					"filters_used":     filters,
					"total_found":      0,
				},
			},
		}, nil
	}

	// Create response with found properties
	content := s.formatPropertiesResponse(parseResponse.Properties, filters)
	
	return &AIResponse{
		Content: content,
		Metadata: models.MessageMetadata{
			Actions: []string{"search_completed", "properties_found"},
			PropertyIDs: extractPropertyIDs(parseResponse.Properties),
			Confidence: 0.95,
			Extra: map[string]interface{}{
				"parse_request_id": parseResponse.RequestID,
				"filters_used":     filters,
				"total_found":      len(parseResponse.Properties),
				"properties":       parseResponse.Properties,
			},
		},
	}, nil
}

// convertToKrishaFilters converts PropertyFilters to enhanced KrishaFilters format
func (s *AIService) convertToKrishaFilters(filters models.PropertyFilters) KrishaFilters {
	krishaFilters := KrishaFilters{
		CollectAllPages: true, // –í–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		MaxResults:     200,  // –ú–∞–∫—Å–∏–º—É–º 200 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ krisha
		Page:           1,
		HasPhoto:       false, // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ç–æ - –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	}

	// Convert city
	if filters.City != "" {
		switch strings.ToLower(filters.City) {
		case "–∞–ª–º–∞—Ç—ã", "almaty":
			krishaFilters.City = "almaty"
		case "–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω", "–∞—Å—Ç–∞–Ω–∞", "nur-sultan", "astana":
			krishaFilters.City = "nur-sultan"
		case "—à—ã–º–∫–µ–Ω—Ç", "shymkent":
			krishaFilters.City = "shymkent"
		default:
			krishaFilters.City = strings.ToLower(filters.City)
		}
	}

	// Convert rooms
	if filters.Rooms != nil {
		krishaFilters.Rooms = fmt.Sprintf("%d", *filters.Rooms)
	}

	// Convert price range
	if filters.PriceMin != nil {
		krishaFilters.PriceFrom = fmt.Sprintf("%d", *filters.PriceMin)
	}
	if filters.PriceMax != nil {
		krishaFilters.PriceTo = fmt.Sprintf("%d", *filters.PriceMax)
	}

	// Convert area range (–∏—Å–ø–æ–ª—å–∑—É–µ–º TotalAreaFrom/TotalAreaTo)
	if filters.TotalAreaFrom != nil {
		krishaFilters.AreaFrom = fmt.Sprintf("%d", *filters.TotalAreaFrom)
	}
	if filters.TotalAreaTo != nil {
		krishaFilters.AreaTo = fmt.Sprintf("%d", *filters.TotalAreaTo)
	}

	return krishaFilters
}

// formatKrishaPropertiesResponse formats Krisha properties into chat response with enhanced display
func (s *AIService) formatKrishaPropertiesResponse(properties []models.ParsedProperty, filters KrishaFilters) string {
	if len(properties) == 0 {
		return "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
	}

	var response strings.Builder
	response.WriteString(fmt.Sprintf("üè† **–ù–∞–π–¥–µ–Ω–æ %d –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏**", len(properties)))

	if filters.City != "" {
		cityName := filters.City
		switch filters.City {
		case "almaty":
			cityName = "–ê–ª–º–∞—Ç—ã"
		case "nur-sultan":
			cityName = "–ù—É—Ä-–°—É–ª—Ç–∞–Ω"
		case "shymkent":
			cityName = "–®—ã–º–∫–µ–Ω—Ç"
		}
		response.WriteString(fmt.Sprintf(" –≤ –≥–æ—Ä–æ–¥–µ **%s**", cityName))
	}
	if filters.Rooms != "" {
		response.WriteString(fmt.Sprintf(", **%s-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ**", filters.Rooms))
	}
	response.WriteString(":\n\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
	displayCount := len(properties)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
	for i := 0; i < displayCount; i++ {
		property := properties[i]

		response.WriteString(fmt.Sprintf("**%d. %s**\n", i+1, property.Title))

		if property.Price > 0 {
			response.WriteString(fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %s ‚Ç∏\n", formatPrice(property.Price)))
		}

		if property.Rooms != nil && *property.Rooms > 0 {
			response.WriteString(fmt.Sprintf("üö™ –ö–æ–º–Ω–∞—Ç: %d\n", *property.Rooms))
		}

		if property.Area != nil && *property.Area > 0 {
			response.WriteString(fmt.Sprintf("üìê –ü–ª–æ—â–∞–¥—å: %.1f –º¬≤\n", *property.Area))
		}

		if property.Address != "" {
			response.WriteString(fmt.Sprintf("üìç –ê–¥—Ä–µ—Å: %s\n", property.Address))
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
		if len(property.Images) > 0 {
			response.WriteString("üì∏ –§–æ—Ç–æ:\n")
			for j, imageURL := range property.Images {
				if j >= 5 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
					response.WriteString(fmt.Sprintf("*... –∏ –µ—â–µ %d —Ñ–æ—Ç–æ*\n", len(property.Images)-j))
					break
				}
				response.WriteString(fmt.Sprintf("![–§–æ—Ç–æ %d](%s)\n", j+1, imageURL))
			}
		}

		if property.URL != "" {
			fullURL := property.URL
			if strings.HasPrefix(property.URL, "/") {
				fullURL = "https://krisha.kz" + property.URL
			}
			response.WriteString(fmt.Sprintf("üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](%s)\n", fullURL))
		}

		response.WriteString("\n---\n\n")
	}

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
	response.WriteString(fmt.Sprintf("üìã **–ü–æ–∫–∞–∑–∞–Ω–æ –≤—Å–µ—Ö %d –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤**\n\n", len(properties)))

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	apartmentsWithImages := 0
	for _, apt := range properties {
		if len(apt.Images) > 0 {
			apartmentsWithImages++
		}
	}

	response.WriteString(fmt.Sprintf("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** %d –æ–±—ä–µ–∫—Ç–æ–≤, %d —Å —Ñ–æ—Ç–æ (%d%%)\n\n",
		len(properties),
		apartmentsWithImages,
		apartmentsWithImages*100/len(properties)))

	response.WriteString("üí¨ **–•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∫–æ–º-—Ç–æ –æ–±—ä–µ–∫—Ç–µ? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!**")
	return response.String()
}

// extractKrishaPropertyIDs extracts property IDs from Krisha properties
func extractKrishaPropertyIDs(properties []models.ParsedProperty) []string {
	ids := make([]string, 0, len(properties))
	for _, property := range properties {
		if property.ID != "" {
			ids = append(ids, property.ID)
		}
	}
	return ids
}