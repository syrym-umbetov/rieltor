// internal/api/handlers/chat.go
package handlers

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/gorilla/websocket"
	"smartestate/internal/models"
	"smartestate/internal/services"
)

type ChatHandler struct {
	chatService *services.ChatService
	aiService   *services.AIService
	connections map[string]*websocket.Conn // sessionID -> connection
	connMutex   sync.RWMutex
}

func NewChatHandler(chatService *services.ChatService, aiService *services.AIService) *ChatHandler {
	return &ChatHandler{
		chatService: chatService,
		aiService:   aiService,
		connections: make(map[string]*websocket.Conn),
	}
}

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // Configure properly in production
	},
}

// CreateSession godoc
// @Summary –°–æ–∑–¥–∞—Ç—å —á–∞—Ç-—Å–µ—Å—Å–∏—é
// @Description –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
// @Tags Chat
// @Accept json
// @Produce json
// @Security BearerAuth
// @Success 201 {object} models.ChatSession "–°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è"
// @Failure 401 {object} map[string]string "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
// @Failure 500 {object} map[string]string "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
// @Router /chat/sessions [post]
func (h *ChatHandler) CreateSession(c *gin.Context) {
	userID := c.GetString("user_id")

	session := &models.ChatSession{
		UserID: uuid.MustParse(userID),
		Context: models.ChatContext{
			PropertyPreferences: make(map[string]interface{}),
			SearchHistory:       []string{},
		},
	}

	if err := h.chatService.CreateSession(session); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create session"})
		return
	}

	c.JSON(http.StatusCreated, session)
}

// GetSession godoc
// @Summary –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç-—Å–µ—Å—Å–∏—é
// @Description –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
// @Tags Chat
// @Accept json
// @Produce json
// @Security BearerAuth
// @Param id path string true "ID —Å–µ—Å—Å–∏–∏"
// @Success 200 {object} models.ChatSession "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏"
// @Failure 403 {object} map[string]string "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
// @Failure 404 {object} map[string]string "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
// @Router /chat/sessions/{id} [get]
func (h *ChatHandler) GetSession(c *gin.Context) {
	id := c.Param("id")
	userID := c.GetString("user_id")

	session, err := h.chatService.GetSession(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Session not found"})
		return
	}

	if session.UserID.String() != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
		return
	}

	c.JSON(http.StatusOK, session)
}

// MessageRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
type MessageRequest struct {
	SessionID string `json:"session_id" binding:"required" example:"550e8400-e29b-41d4-a716-446655440000"`
	Content   string `json:"content" binding:"required" example:"–ù–∞–π–¥–∏ –º–Ω–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ê–ª–º–∞—Ç—ã"`
}

// SendMessage godoc
// @Summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
// @Description –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
// @Tags Chat
// @Accept json
// @Produce json
// @Security BearerAuth
// @Param request body MessageRequest true "–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
// @Success 200 {object} models.ChatMessage "–û—Ç–≤–µ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
// @Failure 400 {object} map[string]string "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
// @Failure 403 {object} map[string]string "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
// @Failure 404 {object} map[string]string "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
// @Failure 500 {object} map[string]string "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
// @Router /chat/messages [post]
func (h *ChatHandler) SendMessage(c *gin.Context) {
	userID := c.GetString("user_id")

	var req MessageRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Check session ownership
	session, err := h.chatService.GetSession(req.SessionID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Session not found"})
		return
	}

	if session.UserID.String() != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
		return
	}

	// Save user message
	userMessage := &models.ChatMessage{
		SessionID: uuid.MustParse(req.SessionID),
		Role:      "user",
		Content:   req.Content,
	}

	if err := h.chatService.SaveMessage(userMessage); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save message"})
		return
	}

	// Get AI response
	aiResponse, err := h.aiService.ProcessChatMessage(req.SessionID, req.Content)
	if err != nil {
		log.Printf("‚ùå Chat Handler: AI service error: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get AI response"})
		return
	}

	// Save AI message
	aiMessage := &models.ChatMessage{
		SessionID: uuid.MustParse(req.SessionID),
		Role:      "assistant",
		Content:   aiResponse.Content,
		Metadata:  aiResponse.Metadata,
	}

	if err := h.chatService.SaveMessage(aiMessage); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save AI response"})
		return
	}

	c.JSON(http.StatusOK, aiMessage)
}

// GetMessages godoc
// @Summary –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
// @Description –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç-—Å–µ—Å—Å–∏–∏
// @Tags Chat
// @Accept json
// @Produce json
// @Security BearerAuth
// @Param id path string true "ID —Å–µ—Å—Å–∏–∏"
// @Success 200 {array} models.ChatMessage "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"
// @Failure 403 {object} map[string]string "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
// @Failure 404 {object} map[string]string "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
// @Failure 500 {object} map[string]string "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"
// @Router /chat/sessions/{id}/messages [get]
func (h *ChatHandler) GetMessages(c *gin.Context) {
	sessionID := c.Param("id")
	userID := c.GetString("user_id")

	// Check session ownership
	session, err := h.chatService.GetSession(sessionID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Session not found"})
		return
	}

	if session.UserID.String() != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
		return
	}

	messages, err := h.chatService.GetMessages(sessionID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get messages"})
		return
	}

	c.JSON(http.StatusOK, messages)
}

// WebSocket message types
type WSMessage struct {
	Type      string                 `json:"type"`
	SessionID string                 `json:"session_id,omitempty"`
	Content   string                 `json:"content,omitempty"`
	Progress  *ProgressInfo          `json:"progress,omitempty"`
	Data      map[string]interface{} `json:"data,omitempty"`
}

// Use ProgressInfo from services package
type ProgressInfo = services.ProgressInfo

// HandleWebSocket godoc
// @Summary WebSocket –¥–ª—è —á–∞—Ç–∞ —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
// @Description –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
// @Tags Chat
// @Accept json
// @Produce json
// @Param token query string true "JWT —Ç–æ–∫–µ–Ω"
// @Success 101 "WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
// @Router /ws/chat [get]
func (h *ChatHandler) HandleWebSocket(c *gin.Context) {
	// Get token from query parameter for WebSocket auth
	token := c.Query("token")
	if token != "" {
		c.Request.Header.Set("Authorization", "Bearer "+token)
	}

	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Printf("WebSocket upgrade failed: %v", err)
		return
	}
	defer conn.Close()

	// Set connection settings
	conn.SetReadLimit(512)
	conn.SetReadDeadline(time.Now().Add(60 * time.Second))
	conn.SetPongHandler(func(string) error {
		conn.SetReadDeadline(time.Now().Add(60 * time.Second))
		return nil
	})

	// Send ping periodically
	go func() {
		ticker := time.NewTicker(54 * time.Second)
		defer ticker.Stop()
		for {
			select {
			case <-ticker.C:
				conn.SetWriteDeadline(time.Now().Add(10 * time.Second))
				if err := conn.WriteMessage(websocket.PingMessage, nil); err != nil {
					return
				}
			}
		}
	}()

	// Handle WebSocket messages
	for {
		var msg WSMessage
		if err := conn.ReadJSON(&msg); err != nil {
			log.Printf("WebSocket read error: %v", err)
			break
		}

		switch msg.Type {
		case "register":
			// Register connection for a session
			if msg.SessionID != "" {
				h.connMutex.Lock()
				h.connections[msg.SessionID] = conn
				h.connMutex.Unlock()
				
				conn.WriteJSON(WSMessage{
					Type: "registered",
					Data: map[string]interface{}{"session_id": msg.SessionID},
				})
			}

		case "message":
			// Process message asynchronously
			go h.processMessageAsync(conn, msg.SessionID, msg.Content)

		case "typing":
			// Echo typing indicator
			conn.WriteJSON(WSMessage{
				Type: "typing",
			})
		}
	}

	// Clean up connection
	h.connMutex.Lock()
	for sessionID, c := range h.connections {
		if c == conn {
			delete(h.connections, sessionID)
			break
		}
	}
	h.connMutex.Unlock()
}

// processMessageAsync handles message processing with real-time updates
func (h *ChatHandler) processMessageAsync(conn *websocket.Conn, sessionID, content string) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
	defer cancel()

	// Send immediate acknowledgment
	conn.WriteJSON(WSMessage{
		Type:    "processing",
		Content: "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
	})

	// Create progress channel for parsing updates
	progressChan := make(chan ProgressInfo, 10)

	// Start processing with progress updates
	go func() {
		defer close(progressChan)
		
		// Send processing progress
		progressChan <- ProgressInfo{
			Step:        "ai_processing",
			Current:     1,
			Total:       3,
			Percentage:  33,
			Description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é AI...",
		}

		// Get AI response with custom progress callback
		response, err := h.aiService.ProcessChatMessageWithProgress(sessionID, content, progressChan)
		if err != nil {
			conn.WriteJSON(WSMessage{
				Type:    "error",
				Content: fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err),
			})
			return
		}

		// Send final response
		conn.WriteJSON(WSMessage{
			Type:    "response",
			Content: response.Content,
			Data:    map[string]interface{}{"metadata": response.Metadata},
		})
	}()

	// Forward progress updates to WebSocket
	for {
		select {
		case progress, ok := <-progressChan:
			if !ok {
				return // Channel closed
			}
			conn.WriteJSON(WSMessage{
				Type:     "progress",
				Progress: &progress,
			})
		case <-ctx.Done():
			conn.WriteJSON(WSMessage{
				Type:    "error",
				Content: "‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
			})
			return
		}
	}
}

// SendProgressToSession sends progress update to a specific session
func (h *ChatHandler) SendProgressToSession(sessionID string, progress ProgressInfo) {
	h.connMutex.RLock()
	conn, exists := h.connections[sessionID]
	h.connMutex.RUnlock()

	if exists {
		conn.WriteJSON(WSMessage{
			Type:     "progress",
			Progress: &progress,
		})
	}
}
